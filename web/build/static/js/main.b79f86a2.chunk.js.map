{"version":3,"sources":["app/hooks.ts","common/fetch.ts","auth/api.ts","auth/slice.ts","auth/Login.tsx","auth/PrivateRoute.tsx","common/constants.ts","common/thunk.ts","common/query.ts","common/api.ts","diary/diary-api.ts","diary/diary-thunk.ts","diary/CharacterCard.tsx","diary/CharacterList.tsx","diary/CreationCard.tsx","common/slice.ts","vampire/vampire-slice.ts","diary/diary-slice.ts","diary/diary-constants.ts","diary/JournalCard.tsx","diary/MarkCard.tsx","diary/MarkList.tsx","diary/ExperienceForm.tsx","diary/ExperienceList.tsx","diary/MemoryCard.tsx","diary/MemoryList.tsx","diary/ResourceCard.tsx","diary/ResourceList.tsx","diary/SkillCard.tsx","diary/SkillList.tsx","diary/VampireForm.tsx","diary/DiaryPage.tsx","vampire/prompt-group-api.ts","vampire/prompt-group-slice.ts","vampire/CreateVampireForm.tsx","vampire/VampireList.tsx","vampire/VampirePage.tsx","app/NavHeader.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","buildFetch","baseHeaders","resource","init","fetchOptions","headers","fetch","loginApi","fetchApi","formData","a","method","body","JSON","stringify","res","json","ok","Error","logoutApi","AUTH_TOKEN_KEY","login","createAsyncThunk","arg","_thunkApi","Accept","localStorage","setItem","key","authFetchApi","thunkApi","token","getState","auth","Authorization","buildAuthHeader","buildAuthFetch","logout","_arg","removeItem","authSlice","createSlice","name","initialState","getItem","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","_action","selectIsLoggedIn","Login","isLoggedIn","dispatch","useState","username","setUsername","password","setPassword","to","Container","Form","FormGroup","className","Label","Control","placeholder","onChange","event","target","value","type","Button","variant","onClick","PrivateRoute","children","OVERLAY_DELAY","show","hide","createCrudThunk","crudApi","queryApi","createApi","retrieveApi","updateApi","removeApi","query","params","create","retrieve","id","update","remove","prepareUrl","url","queryParams","searchParams","undefined","record","modified","search","filter","Object","entries","toString","sort","limit","offset","URLSearchParams","createSearchParams","createCrudApi","baseUrl","queryUrl","detail","entityUrl","eventApi","memoryApi","experienceApi","skillApi","resourceApi","characterApi","markApi","retrieveDeepVampire","retrieveDeepVampireApi","eventThunk","memoryThunk","experienceThunk","skillThunk","resourceThunk","characterThunk","markThunk","CharacterCard","character","isImmortal","setIsImmortal","description","setDescription","useEffect","Card","Body","OverlayTrigger","placement","delay","overlay","Tooltip","ToggleButton","checked","disabled","isDead","FormControl","as","DebounceInput","forceNotifyByEnter","debounceTimeout","element","TextareaAutosize","CharacterList","characters","map","CreationCard","vampireId","Header","Text","vampire","adapter","createEntityAdapter","selectId","entity","slice","getInitialState","setAll","results","addOne","setOne","removeOne","createCrudApiSlice","vampireAdapter","queryVampires","createVampire","updateVampire","removeVampire","vampireSlice","vampireSelectors","getSelectors","eventAdapter","memoryAdapter","memory","experienceAdapter","experience","skillAdapter","skill","resourceAdapter","characterAdapter","markAdapter","mark","registerCrudThunk","crudThunk","entityState","upsertOne","diarySlice","currentEventIndex","eventStart","eventEnd","ids","length","eventBack","eventForward","diaryBuilder","deepVampire","events","lastEventIndex","memories","experiences","skills","resources","marks","actions","selectVampire","diary","selectIsDead","selectIsExhausted","selectSkills","selectResources","selectIsFirstEvent","selectIsLastEvent","selectCurrentEvent","index","entities","selectPreviousEvent","previousIndex","previousId","memorySelectors","selectMemories","selectAll","isForgotten","experienceSelectors","skillSelectors","isChecked","resourceSelectors","isLost","selectDiary","find","isDiary","selectIsDiaryFull","selectDiaryMemories","characterSelectors","selectCharacters","markSelectors","JournalCard","currentEvent","isFirstEvent","isLastEvent","isGameOver","isExhausted","previousEvent","prompt","visit","ButtonGroup","promptDescription","MarkCard","MarkList","ExperienceForm","ExperienceList","MemoryCard","isDiaryFull","hasMaxExperiences","MemoryList","experienceMap","reduce","existing","get","push","set","Map","ResourceCard","setIsDiary","hasOtherDiary","ResourceList","SkillCard","Row","Col","xs","SkillList","VampireForm","navigate","useNavigate","setName","handleDelete","FormLabel","DiaryPage","useParams","parseInt","hasMaxMemories","md","Accordion","defaultActiveKey","AccordionItem","eventKey","AccordionHeader","AccordionBody","Spinner","animation","PROMPT_GROUPS_URL","promptGroupAdapter","promptGroup","sortComparer","b","queryPromptGroups","queryPromptGroupsApi","promptGroupSlice","promptGroupSelectors","CreateVampireForm","onCancel","onSubmit","allPromptGroups","setPromptGroup","FormSelect","VampireList","allVampires","Table","striped","bordered","hover","VampirePage","setShow","hideModal","handleCreate","unwrap","Modal","onHide","NavHeader","Navbar","bg","expand","fixed","Brand","href","Toggle","Collapse","Nav","Link","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b79f86a2.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"app/store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export type FetchApi = typeof fetch;\n\nexport type HeaderRecord = Record<string, string>;\n\nexport function buildFetch(baseHeaders: HeaderRecord): FetchApi {\n  return function (resource, init) {\n    const fetchOptions = init ?? {};\n    fetchOptions.headers = {\n      ...baseHeaders,\n      ...(fetchOptions.headers ?? {}),\n    };\n    return fetch(resource, fetchOptions);\n  };\n}\n\nexport function buildBaseHeaders(): HeaderRecord {\n  return {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  };\n}\n\nexport function buildAuthHeader(token: string): HeaderRecord {\n  return {\n    Authorization: `Token ${token}`,\n  };\n}\n\nexport function buildBaseFetch(): FetchApi {\n  return buildFetch(buildBaseHeaders());\n}\n\nexport function buildAuthFetch(token: string): FetchApi {\n  return buildFetch({\n    ...buildBaseHeaders(),\n    ...buildAuthHeader(token),\n  });\n}\n","import { FetchApi } from \"common/fetch\";\nimport { LoginFormData, TokenResponse } from \"./model\";\n\nexport async function loginApi(\n  fetchApi: FetchApi,\n  formData: LoginFormData\n): Promise<TokenResponse> {\n  const res = await fetchApi(\"/api/v1/auth/login/\", {\n    method: \"POST\",\n    body: JSON.stringify(formData),\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(json);\n  }\n  return json;\n}\n\nexport async function logoutApi(fetchApi: FetchApi): Promise<void> {\n  await fetchApi(\"/api/v1/auth/logout/\", {\n    method: \"POST\",\n  });\n}\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { buildAuthFetch, buildBaseFetch, FetchApi } from \"common/fetch\";\nimport { ThunkApi } from \"common/thunk\";\nimport { RootState } from \"app/store\";\nimport { loginApi, logoutApi } from \"./api\";\nimport { LoginFormData } from \"./model\";\n\nexport interface AuthState {\n  token: string | null;\n}\n\nexport const AUTH_TOKEN_KEY = \"vampire-diary-auth-token\";\n\nexport function getInitialAuthState(): AuthState {\n  return {\n    token: localStorage.getItem(AUTH_TOKEN_KEY),\n  };\n}\n\nexport const login = createAsyncThunk(\n  \"auth/login\",\n  async (arg: LoginFormData, _thunkApi) => {\n    const fetchApi = buildBaseFetch();\n    const res = await loginApi(fetchApi, arg);\n    localStorage.setItem(AUTH_TOKEN_KEY, res.key);\n    return res;\n  }\n);\n\nexport function authFetchApi(thunkApi: ThunkApi): FetchApi {\n  const state = thunkApi.getState() as RootState;\n  const token = state.auth.token;\n  if (token === null) {\n    throw new Error(\"Must be logged in\");\n  }\n  return buildAuthFetch(token);\n}\n\nexport const logout = createAsyncThunk<void, void, {}>(\n  \"auth/logout\",\n  async (_arg, thunkApi) => {\n    const fetchApi = authFetchApi(thunkApi);\n    await logoutApi(fetchApi);\n    localStorage.removeItem(AUTH_TOKEN_KEY);\n  }\n);\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState: getInitialAuthState(),\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      .addCase(login.fulfilled, (state, action) => {\n        state.token = action.payload.key;\n      })\n      .addCase(logout.fulfilled, (state, _action) => {\n        state.token = null;\n      }),\n});\n\nexport function selectIsLoggedIn(state: RootState): boolean {\n  return state.auth.token !== null;\n}\n","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { useState } from \"react\";\nimport { Form, FormGroup, Button, Container } from \"react-bootstrap\";\nimport { Navigate } from \"react-router\";\nimport { login, selectIsLoggedIn } from \"./slice\";\n\nexport function Login() {\n  const isLoggedIn = useAppSelector(selectIsLoggedIn);\n  const dispatch = useAppDispatch();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const onSubmit = () => dispatch(login({ username, password }));\n\n  if (isLoggedIn) {\n    return <Navigate to=\"/vampires\" />;\n  }\n\n  return (\n    <Container>\n      <Form>\n        <FormGroup className=\"mt-3\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control\n            placeholder=\"Username\"\n            onChange={(event) => setUsername(event.target.value)}\n          />\n        </FormGroup>\n\n        <FormGroup className=\"mt-3\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Password\"\n            onChange={(event) => setPassword(event.target.value)}\n          />\n        </FormGroup>\n\n        <Button variant=\"outline-primary\" className=\"mt-3\" onClick={onSubmit}>\n          Log In\n        </Button>\n      </Form>\n    </Container>\n  );\n}\n","import { useAppSelector } from \"app/hooks\";\nimport { Navigate } from \"react-router\";\nimport { selectIsLoggedIn } from \"./slice\";\n\nexport function PrivateRoute({ children }: { children: JSX.Element }) {\n  const isLoggedIn = useAppSelector(selectIsLoggedIn);\n  if (!isLoggedIn) {\n    return <Navigate to=\"/login\" />;\n  }\n  return children;\n}\n","import { OverlayDelay } from \"react-bootstrap/esm/OverlayTrigger\";\n\nexport const OVERLAY_DELAY: OverlayDelay = {\n  show: 500,\n  hide: 0,\n};\n","import { AsyncThunk, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { authFetchApi } from \"auth/slice\";\nimport { CrudApi } from \"./api\";\nimport { BaseEntity } from \"./entity\";\nimport { QueryParams, QueryResponse } from \"./query\";\n\nexport interface ThunkApi {\n  getState(): unknown;\n}\n\nexport type QueryThunk<Entity extends BaseEntity> = AsyncThunk<\n  QueryResponse<Entity>,\n  QueryParams | undefined,\n  {}\n>;\n\nexport type CreateThunk<Entity extends BaseEntity, CreateEntity> = AsyncThunk<\n  Entity,\n  CreateEntity,\n  {}\n>;\n\nexport type RetrieveThunk<Entity extends BaseEntity> = AsyncThunk<\n  Entity,\n  number,\n  {}\n>;\n\nexport type UpdateThunk<Entity extends BaseEntity, UpdateEntity> = AsyncThunk<\n  Entity,\n  BaseEntity & Partial<UpdateEntity>,\n  {}\n>;\n\nexport type RemoveThunk = AsyncThunk<number, number, {}>;\n\nexport interface CrudThunk<\n  Entity extends BaseEntity,\n  CreateEntity,\n  UpdateEntity extends BaseEntity\n> {\n  query: QueryThunk<Entity>;\n  create: CreateThunk<Entity, CreateEntity>;\n  retrieve: RetrieveThunk<Entity>;\n  update: UpdateThunk<Entity, UpdateEntity>;\n  remove: RemoveThunk;\n}\n\nexport function createCrudThunk<\n  Entity extends BaseEntity,\n  CreateEntity,\n  UpdateEntity extends BaseEntity\n>(\n  name: string,\n  crudApi: CrudApi<Entity, CreateEntity, UpdateEntity>\n): CrudThunk<Entity, CreateEntity, UpdateEntity> {\n  const { queryApi, createApi, retrieveApi, updateApi, removeApi } = crudApi;\n\n  const query = createAsyncThunk(\n    `${name}/query`,\n    (params: QueryParams | undefined, thunkApi) => {\n      const fetchApi = authFetchApi(thunkApi);\n      return queryApi(fetchApi, params);\n    }\n  );\n\n  const create = createAsyncThunk(\n    `${name}/create`,\n    (formData: CreateEntity, thunkApi) => {\n      const fetchApi = authFetchApi(thunkApi);\n      return createApi(fetchApi, formData);\n    }\n  );\n\n  const retrieve = createAsyncThunk(\n    `${name}/retrieve`,\n    (id: number, thunkApi) => {\n      const fetchApi = authFetchApi(thunkApi);\n      return retrieveApi(fetchApi, id);\n    }\n  );\n\n  const update = createAsyncThunk(\n    `${name}/update`,\n    (formData: BaseEntity & Partial<UpdateEntity>, thunkApi) => {\n      const fetchApi = authFetchApi(thunkApi);\n      return updateApi(fetchApi, formData);\n    }\n  );\n\n  const remove = createAsyncThunk(\n    `${name}/remove`,\n    async (id: number, thunkApi) => {\n      const fetchApi = authFetchApi(thunkApi);\n      await removeApi(fetchApi, id);\n      return id;\n    }\n  );\n\n  return { query, create, retrieve, update, remove };\n}\n","export interface QueryResponse<Item> {\n  count: number;\n  prev: string | null;\n  next: string | null;\n  results: Item[];\n}\n\nexport type FilterValue = number | boolean | string;\n\nexport type SortDir = \"+\" | \"-\";\n\nexport interface QueryParams {\n  search?: string;\n  filter?: Record<string, FilterValue>;\n  sort?: [string, SortDir];\n  limit?: number;\n  offset?: number;\n}\n\nexport function createSearchParams(\n  queryParams: QueryParams\n): URLSearchParams | null {\n  const record: Record<string, string> = {};\n  let modified = false;\n\n  if (queryParams.search) {\n    modified = true;\n    record[\"search\"] = queryParams.search;\n  }\n\n  if (queryParams.filter) {\n    for (const [key, value] of Object.entries<FilterValue>(\n      queryParams.filter\n    )) {\n      modified = true;\n      record[key] = value.toString();\n    }\n  }\n\n  if (queryParams.sort) {\n    modified = true;\n    record[\"ordering\"] = `${queryParams.sort[1]}${queryParams.sort[0]}`;\n  }\n\n  if (queryParams.limit !== undefined) {\n    modified = true;\n    record[\"limit\"] = queryParams.limit.toString();\n  }\n\n  if (queryParams.offset !== undefined) {\n    modified = true;\n    record[\"offset\"] = queryParams.offset.toString();\n  }\n\n  if (!modified) {\n    return null;\n  }\n\n  return new URLSearchParams(record);\n}\n\nexport function prepareUrl(url: string, queryParams?: QueryParams): string {\n  let searchParams = null;\n  if (queryParams !== undefined) {\n    searchParams = createSearchParams(queryParams);\n  }\n\n  if (searchParams !== null) {\n    return `${url}?${searchParams}`;\n  }\n\n  return url;\n}\n","import { BaseEntity } from \"./entity\";\nimport { FetchApi } from \"./fetch\";\nimport { prepareUrl, QueryParams, QueryResponse } from \"./query\";\n\nexport type QueryApi<Entity extends BaseEntity> = (\n  fetchApi: FetchApi,\n  params?: QueryParams\n) => Promise<QueryResponse<Entity>>;\n\nexport type CreateApi<Entity extends BaseEntity, CreateEntity> = (\n  fetchApi: FetchApi,\n  formData: CreateEntity\n) => Promise<Entity>;\n\nexport type RetrieveApi<Entity extends BaseEntity> = (\n  fetchApi: FetchApi,\n  id: number\n) => Promise<Entity>;\n\nexport type UpdateApi<Entity extends BaseEntity, UpdateEntity> = (\n  fetchApi: FetchApi,\n  formData: BaseEntity & Partial<UpdateEntity>\n) => Promise<Entity>;\n\nexport type RemoveApi = (fetchApi: FetchApi, id: number) => Promise<void>;\n\nexport interface CrudApi<\n  Entity extends BaseEntity,\n  CreateEntity,\n  UpdateEntity extends BaseEntity\n> {\n  queryApi: QueryApi<Entity>;\n  createApi: CreateApi<Entity, CreateEntity>;\n  retrieveApi: RetrieveApi<Entity>;\n  updateApi: UpdateApi<Entity, UpdateEntity>;\n  removeApi: RemoveApi;\n}\n\nexport function createCrudApi<\n  Entity extends BaseEntity,\n  CreateEntity,\n  UpdateEntity extends BaseEntity\n>(baseUrl: string): CrudApi<Entity, CreateEntity, UpdateEntity> {\n  async function queryApi(\n    fetchApi: FetchApi,\n    params?: QueryParams\n  ): Promise<QueryResponse<Entity>> {\n    const queryUrl = prepareUrl(baseUrl, params);\n    const res = await fetchApi(queryUrl);\n    const json = await res.json();\n    if (!res.ok) {\n      throw new Error(json.detail);\n    }\n    return json;\n  }\n\n  async function createApi(\n    fetchApi: FetchApi,\n    formData: CreateEntity\n  ): Promise<Entity> {\n    const res = await fetchApi(baseUrl, {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n    });\n    const json = await res.json();\n    if (!res.ok) {\n      throw new Error(json.detail);\n    }\n    return json;\n  }\n\n  function entityUrl(id: number): string {\n    return `${baseUrl}${id}/`;\n  }\n\n  async function retrieveApi(fetchApi: FetchApi, id: number): Promise<Entity> {\n    const res = await fetchApi(entityUrl(id));\n    const json = await res.json();\n    if (!res.ok) {\n      throw new Error(json.detail);\n    }\n    return json;\n  }\n\n  async function updateApi(\n    fetchApi: FetchApi,\n    { id, ...formData }: BaseEntity & Partial<UpdateEntity>\n  ): Promise<Entity> {\n    const res = await fetchApi(entityUrl(id), {\n      method: \"PATCH\",\n      body: JSON.stringify(formData),\n    });\n    const json = await res.json();\n    if (!res.ok) {\n      throw new Error(json.detail);\n    }\n    return json;\n  }\n\n  async function removeApi(fetchApi: FetchApi, id: number): Promise<void> {\n    const res = await fetchApi(entityUrl(id), { method: \"DELETE\" });\n    if (!res.ok) {\n      const json = await res.json();\n      throw new Error(json.detail);\n    }\n  }\n\n  return {\n    queryApi,\n    createApi,\n    retrieveApi,\n    updateApi,\n    removeApi,\n  };\n}\n","import { createCrudApi } from \"common/api\";\nimport { FetchApi } from \"common/fetch\";\nimport {\n  Character,\n  CreateCharacterFormData,\n  CreateExperienceFormData,\n  CreateMarkFormData,\n  CreateMemoryFormData,\n  CreateResourceFormData,\n  CreateSkillFormData,\n  Experience,\n  DeepVampire,\n  Mark,\n  Memory,\n  Resource,\n  Skill,\n  UpdateCharacterFormData,\n  UpdateExperienceFormData,\n  UpdateMarkFormData,\n  UpdateMemoryFormData,\n  UpdateResourceFormData,\n  UpdateSkillFormData,\n  Event,\n  CreateEventFormData,\n  UpdateEventFormData,\n} from \"./diary-model\";\n\nexport async function retrieveDeepVampireApi(\n  fetchApi: FetchApi,\n  id: number\n): Promise<DeepVampire> {\n  const res = await fetchApi(`/api/v1/game/vampires/${id}/deep/`);\n  return res.json();\n}\n\nfunction baseUrl(resource: string): string {\n  return `/api/v1/game/${resource}/`;\n}\n\nexport const eventApi = createCrudApi<\n  Event,\n  CreateEventFormData,\n  UpdateEventFormData\n>(baseUrl(\"events\"));\n\nexport const memoryApi = createCrudApi<\n  Memory,\n  CreateMemoryFormData,\n  UpdateMemoryFormData\n>(baseUrl(\"memories\"));\n\nexport const experienceApi = createCrudApi<\n  Experience,\n  CreateExperienceFormData,\n  UpdateExperienceFormData\n>(baseUrl(\"experiences\"));\n\nexport const skillApi = createCrudApi<\n  Skill,\n  CreateSkillFormData,\n  UpdateSkillFormData\n>(baseUrl(\"skills\"));\n\nexport const resourceApi = createCrudApi<\n  Resource,\n  CreateResourceFormData,\n  UpdateResourceFormData\n>(baseUrl(\"resources\"));\n\nexport const characterApi = createCrudApi<\n  Character,\n  CreateCharacterFormData,\n  UpdateCharacterFormData\n>(baseUrl(\"characters\"));\n\nexport const markApi = createCrudApi<\n  Mark,\n  CreateMarkFormData,\n  UpdateMarkFormData\n>(baseUrl(\"marks\"));\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { authFetchApi } from \"auth/slice\";\nimport { createCrudThunk } from \"common/thunk\";\nimport {\n  characterApi,\n  eventApi,\n  experienceApi,\n  markApi,\n  memoryApi,\n  resourceApi,\n  retrieveDeepVampireApi,\n  skillApi,\n} from \"./diary-api\";\n\nexport const retrieveDeepVampire = createAsyncThunk(\n  \"diary/retrieveDeepVampire\",\n  (id: number, thunkApi) => {\n    const fetchApi = authFetchApi(thunkApi);\n    return retrieveDeepVampireApi(fetchApi, id);\n  }\n);\n\nexport const eventThunk = createCrudThunk(\"event\", eventApi);\n\nexport const memoryThunk = createCrudThunk(\"memory\", memoryApi);\n\nexport const experienceThunk = createCrudThunk(\"experience\", experienceApi);\n\nexport const skillThunk = createCrudThunk(\"skill\", skillApi);\n\nexport const resourceThunk = createCrudThunk(\"resource\", resourceApi);\n\nexport const characterThunk = createCrudThunk(\"character\", characterApi);\n\nexport const markThunk = createCrudThunk(\"mark\", markApi);\n","import { useAppDispatch } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Card,\n  FormControl,\n  FormGroup,\n  ToggleButton,\n  Button,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { Character } from \"./diary-model\";\nimport { characterThunk } from \"./diary-thunk\";\n\nexport interface CharacterCardProps {\n  character: Character;\n}\n\nexport function CharacterCard({ character }: CharacterCardProps) {\n  const dispatch = useAppDispatch();\n\n  const [isImmortal, setIsImmortal] = useState(character.isImmortal);\n  const [description, setDescription] = useState(character.description);\n\n  useEffect(() => {\n    setIsImmortal(character.isImmortal);\n  }, [character]);\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(characterThunk.update({ id: character.id, description: value }));\n  };\n\n  const handleDead = () =>\n    dispatch(characterThunk.update({ id: character.id, isDead: true }));\n\n  const toggleIsImmortal = () => {\n    const value = !isImmortal;\n    dispatch(characterThunk.update({ id: character.id, isImmortal: value }));\n  };\n\n  return (\n    <Card className=\"mt-3\">\n      <Card.Body>\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={OVERLAY_DELAY}\n          overlay={\n            <Tooltip>\n              Mortal Characters die, but immortal Characters do not\n            </Tooltip>\n          }\n        >\n          <ToggleButton\n            type=\"checkbox\"\n            variant=\"outline-secondary\"\n            value=\"1\"\n            checked={isImmortal}\n            onClick={toggleIsImmortal}\n          >\n            Immortal\n          </ToggleButton>\n        </OverlayTrigger>\n\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={OVERLAY_DELAY}\n          overlay={\n            <Tooltip>\n              {isImmortal\n                ? \"Immortal Characters cannot be removed\"\n                : \"Remove this Character\"}\n            </Tooltip>\n          }\n        >\n          <span className=\"d-inline-block\">\n            <Button\n              variant=\"outline-danger\"\n              value=\"2\"\n              className=\"ms-3\"\n              disabled={isImmortal}\n              onClick={handleDead}\n            >\n              Dead\n            </Button>\n          </span>\n        </OverlayTrigger>\n        <FormGroup className=\"mt-3\">\n          <FormControl\n            as={DebounceInput}\n            forceNotifyByEnter={false}\n            debounceTimeout={1000}\n            placeholder=\"Describe the character...\"\n            value={description}\n            onChange={handleDescriptionChange}\n            element={TextareaAutosize as any}\n          />\n        </FormGroup>\n      </Card.Body>\n    </Card>\n  );\n}\n","import { CharacterCard } from \"./CharacterCard\";\nimport { Character } from \"./diary-model\";\n\nexport interface CharacterListProps {\n  characters: Character[];\n}\n\nexport function CharacterList({ characters }: CharacterListProps) {\n  return (\n    <>\n      {characters.map((character) => (\n        <CharacterCard key={character.id} character={character} />\n      ))}\n    </>\n  );\n}\n","import { useAppDispatch } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport { Card, Button, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { eventThunk } from \"./diary-thunk\";\n\nexport interface CreationCardProps {\n  vampireId: number;\n}\n\nexport function CreationCard({ vampireId }: CreationCardProps) {\n  const dispatch = useAppDispatch();\n\n  const handleStart = () => dispatch(eventThunk.create({ vampire: vampireId }));\n\n  return (\n    <Card>\n      <Card.Header>Creation</Card.Header>\n      <Card.Body>\n        <Card.Text>To create your Vampire:</Card.Text>\n\n        <ol>\n          <li>Give your Vampire a name and description</li>\n          <li>\n            Create a single Memory and Experience that describes your Vampire's\n            history as a mortal\n          </li>\n          <li>Create at least three mortal Characters</li>\n          <li>\n            Give your Vampire three Skills that they practiced as a mortal\n          </li>\n          <li>\n            Give your Vampire three Resources that they acquired as a mortal\n          </li>\n          <li>\n            Create three Memories, each with one Experience relating to any two\n            Characters, Skills and/or Resources that you have created\n          </li>\n          <li>\n            Create an immortal Character who gifted or cursed your Vampire with\n            undeath\n          </li>\n          <li>\n            Create a Mark, a Memory and an Experience relating to how your\n            Vampire was gifted or cursed with undeath\n          </li>\n        </ol>\n\n        <Card.Text>\n          Your Vampire should now have three Skills, three Resources, one Mark,\n          at least three mortal Characters, one immortal Character, and five\n          Memories each with one Experience.\n        </Card.Text>\n\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={OVERLAY_DELAY}\n          overlay={<Tooltip>Generate the first Prompt</Tooltip>}\n        >\n          <Button variant=\"outline-success\" onClick={handleStart}>\n            Start\n          </Button>\n        </OverlayTrigger>\n      </Card.Body>\n    </Card>\n  );\n}\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nimport { createCrudApi } from \"./api\";\nimport { BaseEntity } from \"./entity\";\nimport { createCrudThunk } from \"./thunk\";\n\nexport interface CreateCrudApiSliceOptions {\n  name: string;\n  baseUrl: string;\n}\n\nexport function createCrudApiSlice<\n  Entity extends BaseEntity,\n  CreateEntity,\n  UpdateEntity extends BaseEntity\n>({ name, baseUrl }: CreateCrudApiSliceOptions) {\n  const adapter = createEntityAdapter<Entity>({\n    selectId: (entity) => entity.id,\n  });\n\n  const api = createCrudApi<Entity, CreateEntity, UpdateEntity>(baseUrl);\n  const { query, create, retrieve, update, remove } = createCrudThunk(\n    name,\n    api\n  );\n\n  const slice = createSlice({\n    name,\n    initialState: adapter.getInitialState(),\n    reducers: {},\n    extraReducers: (builder) =>\n      builder\n        .addCase(query.fulfilled, (state: any, action: any) => {\n          adapter.setAll(state, action.payload.results);\n        })\n        .addCase(create.fulfilled, (state: any, action: any) => {\n          adapter.addOne(state, action.payload);\n        })\n        .addCase(retrieve.fulfilled, (state: any, action: any) => {\n          adapter.setOne(state, action.payload);\n        })\n        .addCase(update.fulfilled, (state: any, action: any) => {\n          adapter.setOne(state, action.payload);\n        })\n        .addCase(remove.fulfilled, (state: any, action: any) => {\n          adapter.removeOne(state, action.payload);\n        }),\n  });\n\n  return {\n    adapter,\n    query,\n    create,\n    retrieve,\n    update,\n    remove,\n    slice,\n  };\n}\n","import { RootState } from \"app/store\";\nimport { createCrudApiSlice } from \"common/slice\";\nimport {\n  CreateVampireFormData,\n  UpdateVampireFormData,\n  Vampire,\n} from \"./vampire-model\";\n\nexport const {\n  adapter: vampireAdapter,\n  query: queryVampires,\n  create: createVampire,\n  retrieve: retrieveVampire,\n  update: updateVampire,\n  remove: removeVampire,\n  slice: vampireSlice,\n} = createCrudApiSlice<Vampire, CreateVampireFormData, UpdateVampireFormData>({\n  name: \"vampire\",\n  baseUrl: \"/api/v1/game/vampires/\",\n});\n\nexport const vampireSelectors = vampireAdapter.getSelectors<RootState>(\n  (state) => state.vampire\n);\n","import {\n  ActionReducerMapBuilder,\n  createEntityAdapter,\n  createSlice,\n  EntityAdapter,\n  EntityState,\n} from \"@reduxjs/toolkit\";\nimport { RootState } from \"app/store\";\nimport { BaseEntity } from \"common/entity\";\nimport { CrudThunk } from \"common/thunk\";\nimport { Vampire } from \"vampire/vampire-model\";\nimport { updateVampire } from \"vampire/vampire-slice\";\nimport { DIARY_MEMORY_CAPACITY } from \"./diary-constants\";\nimport {\n  Character,\n  Event,\n  Experience,\n  Mark,\n  Memory,\n  Resource,\n  Skill,\n} from \"./diary-model\";\nimport {\n  characterThunk,\n  eventThunk,\n  experienceThunk,\n  markThunk,\n  memoryThunk,\n  resourceThunk,\n  retrieveDeepVampire,\n  skillThunk,\n} from \"./diary-thunk\";\n\nconst eventAdapter = createEntityAdapter<Event>({\n  selectId: (event) => event.id,\n});\n\nconst memoryAdapter = createEntityAdapter<Memory>({\n  selectId: (memory) => memory.id,\n});\n\nconst experienceAdapter = createEntityAdapter<Experience>({\n  selectId: (experience) => experience.id,\n});\n\nconst skillAdapter = createEntityAdapter<Skill>({\n  selectId: (skill) => skill.id,\n});\n\nconst resourceAdapter = createEntityAdapter<Resource>({\n  selectId: (resource) => resource.id,\n});\n\nconst characterAdapter = createEntityAdapter<Character>({\n  selectId: (character) => character.id,\n});\n\nconst markAdapter = createEntityAdapter<Mark>({\n  selectId: (mark) => mark.id,\n});\n\nexport interface DiaryState {\n  vampire: Vampire | undefined;\n  currentEventIndex: number | undefined;\n  event: EntityState<Event>;\n  memory: EntityState<Memory>;\n  experience: EntityState<Experience>;\n  skill: EntityState<Skill>;\n  resource: EntityState<Resource>;\n  character: EntityState<Character>;\n  mark: EntityState<Mark>;\n}\n\nexport function getInitialDiaryState(): DiaryState {\n  return {\n    vampire: undefined,\n    currentEventIndex: undefined,\n    event: eventAdapter.getInitialState(),\n    memory: memoryAdapter.getInitialState(),\n    experience: experienceAdapter.getInitialState(),\n    skill: skillAdapter.getInitialState(),\n    resource: resourceAdapter.getInitialState(),\n    character: characterAdapter.getInitialState(),\n    mark: markAdapter.getInitialState(),\n  };\n}\n\nfunction registerCrudThunk<Entity extends BaseEntity>(\n  builder: ActionReducerMapBuilder<DiaryState>,\n  getState: (state: DiaryState) => EntityState<Entity>,\n  adapter: EntityAdapter<Entity>,\n  crudThunk: CrudThunk<Entity, any, any>\n): ActionReducerMapBuilder<DiaryState> {\n  return builder\n    .addCase(crudThunk.create.fulfilled, (state, action) => {\n      const entityState = getState(state);\n      adapter.addOne(entityState, action.payload);\n    })\n    .addCase(crudThunk.update.fulfilled, (state, action) => {\n      const entityState = getState(state);\n      adapter.upsertOne(entityState, action.payload);\n    })\n    .addCase(crudThunk.remove.fulfilled, (state, action) => {\n      const entityState = getState(state);\n      adapter.removeOne(entityState, action.payload);\n    });\n}\n\nexport const diarySlice = createSlice({\n  name: \"diary\",\n  initialState: getInitialDiaryState(),\n  reducers: {\n    eventStart: (state) => {\n      if (state.currentEventIndex === undefined) {\n        return;\n      }\n      state.currentEventIndex = 0;\n    },\n    eventEnd: (state) => {\n      if (state.currentEventIndex === undefined) {\n        return;\n      }\n      state.currentEventIndex = state.event.ids.length - 1;\n    },\n    eventBack: (state) => {\n      if (\n        state.currentEventIndex === undefined ||\n        state.currentEventIndex === 0\n      ) {\n        return;\n      }\n      state.currentEventIndex--;\n    },\n    eventForward: (state) => {\n      if (\n        state.currentEventIndex === undefined ||\n        state.currentEventIndex >= state.event.ids.length - 1\n      ) {\n        return;\n      }\n      state.currentEventIndex++;\n    },\n  },\n  extraReducers: (builder) => {\n    let diaryBuilder = builder.addCase(\n      retrieveDeepVampire.fulfilled,\n      (state, action) => {\n        const deepVampire = action.payload;\n\n        state.vampire = {\n          id: deepVampire.id,\n          name: deepVampire.name,\n          description: deepVampire.description,\n          isDead: deepVampire.isDead,\n        };\n\n        const events = deepVampire.events;\n        if (events.length > 0) {\n          const lastEventIndex = events.length - 1;\n          state.currentEventIndex = lastEventIndex;\n        }\n\n        eventAdapter.setAll(state.event, deepVampire.events);\n        memoryAdapter.setAll(state.memory, deepVampire.memories);\n        experienceAdapter.setAll(state.experience, deepVampire.experiences);\n        skillAdapter.setAll(state.skill, deepVampire.skills);\n        resourceAdapter.setAll(state.resource, deepVampire.resources);\n        characterAdapter.setAll(state.character, deepVampire.characters);\n        markAdapter.setAll(state.mark, deepVampire.marks);\n      }\n    );\n\n    diaryBuilder = diaryBuilder.addCase(\n      updateVampire.fulfilled,\n      (state, action) => {\n        state.vampire = action.payload;\n      }\n    );\n\n    diaryBuilder = diaryBuilder.addCase(\n      eventThunk.create.fulfilled,\n      (state, action) => {\n        eventAdapter.addOne(state.event, action.payload);\n        const lastEventIndex = state.event.ids.length - 1;\n        state.currentEventIndex = lastEventIndex;\n      }\n    );\n\n    diaryBuilder = diaryBuilder.addCase(\n      eventThunk.update.fulfilled,\n      (state, action) => {\n        eventAdapter.upsertOne(state.event, action.payload);\n      }\n    );\n\n    diaryBuilder = diaryBuilder.addCase(\n      eventThunk.remove.fulfilled,\n      (state, action) => {\n        eventAdapter.removeOne(state.event, action.payload);\n      }\n    );\n\n    diaryBuilder = registerCrudThunk(\n      diaryBuilder,\n      (state) => state.memory,\n      memoryAdapter,\n      memoryThunk\n    );\n\n    diaryBuilder = registerCrudThunk(\n      diaryBuilder,\n      (state) => state.experience,\n      experienceAdapter,\n      experienceThunk\n    );\n\n    diaryBuilder = registerCrudThunk(\n      diaryBuilder,\n      (state) => state.skill,\n      skillAdapter,\n      skillThunk\n    );\n\n    diaryBuilder = registerCrudThunk(\n      diaryBuilder,\n      (state) => state.resource,\n      resourceAdapter,\n      resourceThunk\n    );\n\n    diaryBuilder = registerCrudThunk(\n      diaryBuilder,\n      (state) => state.character,\n      characterAdapter,\n      characterThunk\n    );\n\n    diaryBuilder = registerCrudThunk(\n      diaryBuilder,\n      (state) => state.mark,\n      markAdapter,\n      markThunk\n    );\n\n    return diaryBuilder;\n  },\n});\n\nexport const { eventStart, eventEnd, eventBack, eventForward } =\n  diarySlice.actions;\n\nexport const selectVampire = (state: RootState) => state.diary.vampire;\n\nexport const selectIsDead = (state: RootState) =>\n  state.diary.vampire?.isDead ?? false;\n\nexport const selectIsExhausted = (state: RootState) => {\n  return (\n    selectSkills(state).length === 0 && selectResources(state).length === 0\n  );\n};\n\nexport const selectIsFirstEvent = (state: RootState) => {\n  return state.diary.currentEventIndex === 0;\n};\n\nexport const selectIsLastEvent = (state: RootState) => {\n  return (\n    state.diary.currentEventIndex !== undefined &&\n    state.diary.currentEventIndex === state.diary.event.ids.length - 1\n  );\n};\n\nexport const selectCurrentEventIndex = (state: RootState) =>\n  state.diary.currentEventIndex;\n\nexport const selectCurrentEvent = (state: RootState) => {\n  const index = state.diary.currentEventIndex;\n  if (index === undefined) {\n    return;\n  }\n\n  const id = state.diary.event.ids[index];\n  return state.diary.event.entities[id];\n};\n\nexport const selectPreviousEvent = (state: RootState) => {\n  const index = state.diary.currentEventIndex;\n  if (index === undefined || index === 0) {\n    return;\n  }\n\n  const previousIndex = index - 1;\n  const previousId = state.diary.event.ids[previousIndex];\n  return state.diary.event.entities[previousId];\n};\n\nexport const eventSelectors = eventAdapter.getSelectors(\n  (state: RootState) => state.diary.event\n);\n\nexport const memorySelectors = memoryAdapter.getSelectors(\n  (state: RootState) => state.diary.memory\n);\n\nexport const selectMemories = (state: RootState) => {\n  return memorySelectors\n    .selectAll(state)\n    .filter((memory) => !memory.isForgotten && memory.diary === null);\n};\n\nexport const experienceSelectors = experienceAdapter.getSelectors(\n  (state: RootState) => state.diary.experience\n);\n\nexport const skillSelectors = skillAdapter.getSelectors(\n  (state: RootState) => state.diary.skill\n);\n\nexport const selectSkills = (state: RootState) => {\n  return skillSelectors.selectAll(state).filter((skill) => !skill.isChecked);\n};\n\nexport const resourceSelectors = resourceAdapter.getSelectors(\n  (state: RootState) => state.diary.resource\n);\n\nexport const selectResources = (state: RootState) => {\n  return resourceSelectors\n    .selectAll(state)\n    .filter((resource) => !resource.isLost);\n};\n\nexport const selectDiary = (state: RootState) => {\n  return (\n    resourceSelectors\n      .selectAll(state)\n      .find((resource) => resource.isDiary && !resource.isLost) ?? null\n  );\n};\n\nexport const selectDiaryMemories = (state: RootState) => {\n  const diary = selectDiary(state);\n  if (diary === null) {\n    return [];\n  }\n\n  return memorySelectors\n    .selectAll(state)\n    .filter((memory) => memory.diary === diary.id);\n};\n\nexport const selectIsDiaryFull = (state: RootState) => {\n  return selectDiaryMemories(state).length >= DIARY_MEMORY_CAPACITY;\n};\n\nexport const characterSelectors = characterAdapter.getSelectors(\n  (state: RootState) => state.diary.character\n);\n\nexport const selectCharacters = (state: RootState) => {\n  return characterSelectors\n    .selectAll(state)\n    .filter((character) => !character.isDead);\n};\n\nexport const markSelectors = markAdapter.getSelectors(\n  (state: RootState) => state.diary.mark\n);\n","export const VAMPIRE_MEMORY_CAPACITY = 5;\n\nexport const DIARY_MEMORY_CAPACITY = 4;\n\nexport const MEMORY_EXPERIENCE_CAPACITY = 3;\n","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  ButtonGroup,\n  Button,\n  Card,\n  FormControl,\n  FormGroup,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { updateVampire } from \"vampire/vampire-slice\";\nimport { Event } from \"./diary-model\";\nimport {\n  eventBack,\n  eventEnd,\n  eventForward,\n  eventStart,\n  selectIsDead,\n  selectIsExhausted,\n  selectIsFirstEvent,\n  selectIsLastEvent,\n  selectPreviousEvent,\n} from \"./diary-slice\";\nimport { eventThunk } from \"./diary-thunk\";\n\nexport interface JournalCardProps {\n  vampireId: number;\n  currentEvent: Event;\n}\n\nexport function JournalCard({ vampireId, currentEvent }: JournalCardProps) {\n  const dispatch = useAppDispatch();\n  const isFirstEvent = useAppSelector(selectIsFirstEvent);\n  const isLastEvent = useAppSelector(selectIsLastEvent);\n  const isGameOver = useAppSelector(selectIsDead);\n  const isExhausted = useAppSelector(selectIsExhausted);\n  const previousEvent = useAppSelector(selectPreviousEvent);\n\n  const [description, setDescription] = useState(currentEvent.description);\n\n  useEffect(() => {\n    setDescription(currentEvent.description);\n  }, [currentEvent]);\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(eventThunk.update({ id: currentEvent.id, description: value }));\n  };\n\n  const handleFirst = () => dispatch(eventStart());\n\n  const handleLast = () => dispatch(eventEnd());\n\n  const handlePrev = () => dispatch(eventBack());\n\n  const handleNext = () => {\n    if (isLastEvent) {\n      dispatch(eventThunk.create({ vampire: vampireId }));\n    } else {\n      dispatch(eventForward());\n    }\n  };\n\n  const handleDead = () =>\n    dispatch(updateVampire({ id: vampireId, isDead: true }));\n\n  return (\n    <Card>\n      <Card.Header>\n        Prompt {currentEvent.prompt}\n        {currentEvent.visit}\n      </Card.Header>\n      <Card.Body>\n        <ButtonGroup className=\"mb-3\">\n          <Button\n            variant=\"outline-secondary\"\n            disabled={isFirstEvent}\n            onClick={handleFirst}\n          >\n            First\n          </Button>\n\n          <Button\n            variant=\"outline-secondary\"\n            disabled={isLastEvent}\n            onClick={handleLast}\n          >\n            Last\n          </Button>\n        </ButtonGroup>\n\n        <ButtonGroup className=\"ms-3 mb-3\">\n          <Button\n            variant=\"outline-secondary\"\n            disabled={!previousEvent}\n            onClick={handlePrev}\n          >\n            Previous\n          </Button>\n\n          <Button\n            variant={isLastEvent ? \"outline-success\" : \"outline-secondary\"}\n            disabled={isLastEvent && isGameOver}\n            onClick={handleNext}\n          >\n            Next\n          </Button>\n        </ButtonGroup>\n\n        {isExhausted && !isGameOver ? (\n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={OVERLAY_DELAY}\n            overlay={\n              <Tooltip>\n                <p>\n                  You die if a Prompt forces you to check a Skill or lose a\n                  Resource but you have none.\n                </p>\n                <p>\n                  Describe how your Vampire dies and then click this button to\n                  end the game.\n                </p>\n              </Tooltip>\n            }\n          >\n            <Button\n              variant=\"outline-danger\"\n              className=\"ms-3 mb-3\"\n              onClick={handleDead}\n            >\n              Dead\n            </Button>\n          </OverlayTrigger>\n        ) : null}\n        <Card.Text>{currentEvent?.promptDescription}</Card.Text>\n\n        <FormGroup>\n          <FormControl\n            as={DebounceInput}\n            forceNotifyByEnter={false}\n            debounceTimeout={1000}\n            placeholder=\"Describe what happens...\"\n            value={description}\n            onChange={handleDescriptionChange}\n            element={TextareaAutosize as any}\n          />\n        </FormGroup>\n      </Card.Body>\n    </Card>\n  );\n}\n","import { useAppDispatch } from \"app/hooks\";\nimport { useState } from \"react\";\nimport { FormControl, FormGroup } from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { Mark } from \"./diary-model\";\nimport { markThunk } from \"./diary-thunk\";\n\nexport interface MarkFormProps {\n  mark: Mark;\n}\n\nexport function MarkCard({ mark }: MarkFormProps) {\n  const dispatch = useAppDispatch();\n  const [description, setDescription] = useState(mark.description);\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(markThunk.update({ id: mark.id, description: value }));\n  };\n\n  return (\n    <FormGroup className=\"mt-3\">\n      <FormControl\n        as={DebounceInput}\n        element={TextareaAutosize as any}\n        forceNotifyByEnter={false}\n        debounceTimeout={1000}\n        placeholder=\"Describe the mark...\"\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n    </FormGroup>\n  );\n}\n","import { Mark } from \"./diary-model\";\nimport { MarkCard } from \"./MarkCard\";\n\nexport interface MarkListProps {\n  marks: Mark[];\n}\n\nexport function MarkList({ marks }: MarkListProps) {\n  return (\n    <>\n      {marks.map((mark) => (\n        <MarkCard key={mark.id} mark={mark} />\n      ))}\n    </>\n  );\n}\n","import { useAppDispatch } from \"app/hooks\";\nimport React, { useState } from \"react\";\nimport { FormControl, FormGroup } from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { Experience } from \"./diary-model\";\nimport { experienceThunk } from \"./diary-thunk\";\n\nexport interface ExperienceFormProps {\n  experience: Experience;\n}\n\nexport function ExperienceForm({ experience }: ExperienceFormProps) {\n  const dispatch = useAppDispatch();\n  const [description, setDescription] = useState(experience.description);\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(experienceThunk.update({ id: experience.id, description: value }));\n  };\n\n  return (\n    <FormGroup className=\"mt-3\">\n      <FormControl\n        as={DebounceInput}\n        forceNotifyByEnter={false}\n        debounceTimeout={1000}\n        placeholder=\"Describe the experience...\"\n        value={description}\n        onChange={handleDescriptionChange}\n        element={TextareaAutosize as any}\n      />\n    </FormGroup>\n  );\n}\n","import { Experience } from \"./diary-model\";\nimport { ExperienceForm } from \"./ExperienceForm\";\n\nexport interface ExperienceListProps {\n  experiences: Experience[];\n}\n\nexport function ExperienceList({ experiences }: ExperienceListProps) {\n  return (\n    <>\n      {experiences.map((experience, index) => (\n        <ExperienceForm key={experience.id} experience={experience} />\n      ))}\n    </>\n  );\n}\n","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { Button, Card, OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\nimport { experienceThunk, memoryThunk } from \"./diary-thunk\";\nimport { ExperienceList } from \"./ExperienceList\";\nimport { Experience, Memory } from \"./diary-model\";\nimport { selectDiary, selectIsDiaryFull } from \"./diary-slice\";\nimport { MEMORY_EXPERIENCE_CAPACITY } from \"./diary-constants\";\nimport { OVERLAY_DELAY } from \"common/constants\";\n\nexport interface MemoryCardProps {\n  memory: Memory;\n  experiences: Experience[];\n}\n\nexport function MemoryCard({ memory, experiences }: MemoryCardProps) {\n  const dispatch = useAppDispatch();\n  const diary = useAppSelector(selectDiary);\n  const isDiaryFull = useAppSelector(selectIsDiaryFull);\n\n  const hasMaxExperiences = experiences.length >= MEMORY_EXPERIENCE_CAPACITY;\n\n  const handleCreate = () =>\n    dispatch(experienceThunk.create({ memory: memory.id, description: \"\" }));\n\n  const handleForget = () =>\n    dispatch(memoryThunk.update({ id: memory.id, isForgotten: true }));\n\n  const handleDiary = () =>\n    dispatch(memoryThunk.update({ id: memory.id, diary: diary!.id }));\n\n  return (\n    <Card className=\"mt-3\">\n      <Card.Header>Experiences</Card.Header>\n      <Card.Body>\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={OVERLAY_DELAY}\n          overlay={\n            <Tooltip>\n              {hasMaxExperiences\n                ? \"A Memory can only hold three Experiences\"\n                : \"Add a new Experience\"}\n            </Tooltip>\n          }\n        >\n          <span className=\"d-inline-block\">\n            <Button\n              disabled={hasMaxExperiences}\n              variant=\"outline-success\"\n              onClick={handleCreate}\n            >\n              Create\n            </Button>\n          </span>\n        </OverlayTrigger>\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={OVERLAY_DELAY}\n          overlay={<Tooltip>Remove this Memory</Tooltip>}\n        >\n          <Button\n            className=\"ms-3\"\n            variant=\"outline-danger\"\n            onClick={handleForget}\n          >\n            Forget\n          </Button>\n        </OverlayTrigger>\n\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={OVERLAY_DELAY}\n          overlay={\n            <Tooltip>\n              {diary === null\n                ? \"Your Vampire does not have a Diary\"\n                : isDiaryFull\n                ? \"A Diary can only hold four Memories\"\n                : \"Move this Memory to your Diary\"}\n            </Tooltip>\n          }\n        >\n          <span className=\"d-inline-block\">\n            <Button\n              disabled={diary === null || isDiaryFull}\n              variant=\"outline-secondary\"\n              className=\"ms-3\"\n              onClick={handleDiary}\n            >\n              Diary\n            </Button>\n          </span>\n        </OverlayTrigger>\n\n        <ExperienceList experiences={experiences} />\n      </Card.Body>\n    </Card>\n  );\n}\n","import { Experience, Memory } from \"./diary-model\";\nimport { MemoryCard } from \"./MemoryCard\";\n\nexport interface MemoryListProps {\n  memories: Memory[];\n  experiences: Experience[];\n}\n\nexport function MemoryList({ memories, experiences }: MemoryListProps) {\n  const experienceMap = experiences.reduce((map, experience) => {\n    const existing = map.get(experience.memory);\n    if (existing) {\n      existing.push(experience);\n    } else {\n      map.set(experience.memory, [experience]);\n    }\n    return map;\n  }, new Map<number, Experience[]>());\n\n  return (\n    <>\n      {memories.map((memory) => (\n        <MemoryCard\n          key={memory.id}\n          memory={memory}\n          experiences={experienceMap.get(memory.id) ?? []}\n        />\n      ))}\n    </>\n  );\n}\n","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  FormControl,\n  FormGroup,\n  OverlayTrigger,\n  ToggleButton,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { Resource } from \"./diary-model\";\nimport { selectDiary } from \"./diary-slice\";\nimport { resourceThunk } from \"./diary-thunk\";\n\nexport interface ResourceCardProps {\n  resource: Resource;\n}\n\nexport function ResourceCard({ resource }: ResourceCardProps) {\n  const dispatch = useAppDispatch();\n\n  const [description, setDescription] = useState(resource.description);\n  const [isDiary, setIsDiary] = useState(resource.isDiary);\n\n  const diary = useAppSelector(selectDiary);\n  const hasOtherDiary = diary !== null && !isDiary;\n\n  useEffect(() => {\n    setIsDiary(resource.isDiary);\n  }, [resource]);\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(resourceThunk.update({ id: resource.id, description: value }));\n  };\n\n  const handleLost = () =>\n    dispatch(resourceThunk.update({ id: resource.id, isLost: true }));\n\n  const toggleIsDiary = () => {\n    const value = !isDiary;\n    dispatch(resourceThunk.update({ id: resource.id, isDiary: value }));\n  };\n\n  return (\n    <Card className=\"mt-3\">\n      <Card.Body>\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={OVERLAY_DELAY}\n          overlay={\n            <Tooltip>\n              {hasOtherDiary\n                ? \"A Vampire can only hold one Diary\"\n                : \"A Diary can hold up to four Memories\"}\n            </Tooltip>\n          }\n        >\n          <span className=\"d-inline-block\">\n            <ToggleButton\n              type=\"checkbox\"\n              variant=\"outline-secondary\"\n              value=\"1\"\n              disabled={hasOtherDiary}\n              checked={isDiary}\n              onClick={toggleIsDiary}\n            >\n              Diary\n            </ToggleButton>\n          </span>\n        </OverlayTrigger>\n\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={OVERLAY_DELAY}\n          overlay={<Tooltip>Remove this Resource</Tooltip>}\n        >\n          <Button\n            variant=\"outline-danger\"\n            className=\"ms-3\"\n            onClick={handleLost}\n          >\n            Lost\n          </Button>\n        </OverlayTrigger>\n\n        <FormGroup>\n          <FormControl\n            className=\"mt-3\"\n            as={DebounceInput}\n            element={TextareaAutosize as any}\n            forceNotifyByEnter={false}\n            debounceTimeout={1000}\n            placeholder=\"Describe the resource...\"\n            value={description}\n            onChange={handleDescriptionChange}\n          />\n        </FormGroup>\n      </Card.Body>\n    </Card>\n  );\n}\n","import { Resource } from \"./diary-model\";\nimport { ResourceCard } from \"./ResourceCard\";\n\nexport interface ResourceListProps {\n  resources: Resource[];\n}\n\nexport function ResourceList({ resources }: ResourceListProps) {\n  return (\n    <>\n      {resources.map((resource) => (\n        <ResourceCard key={resource.id} resource={resource} />\n      ))}\n    </>\n  );\n}\n","import { useAppDispatch } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport { useState } from \"react\";\nimport {\n  Button,\n  Col,\n  FormControl,\n  FormGroup,\n  OverlayTrigger,\n  Row,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { Skill } from \"./diary-model\";\nimport { skillThunk } from \"./diary-thunk\";\n\nexport interface SkillCardProps {\n  skill: Skill;\n}\n\nexport function SkillCard({ skill }: SkillCardProps) {\n  const dispatch = useAppDispatch();\n  const [description, setDescription] = useState(skill.description);\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(skillThunk.update({ id: skill.id, description: value }));\n  };\n\n  const handleCheck = () =>\n    dispatch(skillThunk.update({ id: skill.id, isChecked: true }));\n\n  return (\n    <Row className=\"mt-3\">\n      <Col>\n        <FormGroup>\n          <FormControl\n            as={DebounceInput}\n            element={TextareaAutosize as any}\n            forceNotifyByEnter={false}\n            debounceTimeout={1000}\n            placeholder=\"Describe the skill...\"\n            value={description}\n            onChange={handleDescriptionChange}\n          />\n        </FormGroup>\n      </Col>\n      <Col xs=\"auto\">\n        <OverlayTrigger\n          placement=\"right\"\n          delay={OVERLAY_DELAY}\n          overlay={<Tooltip>Remove this Skill</Tooltip>}\n        >\n          <Button variant=\"outline-danger\" onClick={handleCheck}>\n            Check\n          </Button>\n        </OverlayTrigger>\n      </Col>\n    </Row>\n  );\n}\n","import { Skill } from \"./diary-model\";\nimport { SkillCard } from \"./SkillCard\";\n\nexport interface SkillListProps {\n  skills: Skill[];\n}\n\nexport function SkillList({ skills }: SkillListProps) {\n  return (\n    <>\n      {skills.map((skill) => (\n        <SkillCard key={skill.id} skill={skill} />\n      ))}\n    </>\n  );\n}\n","import { useAppDispatch } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  FormControl,\n  FormGroup,\n  FormLabel,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport { useNavigate } from \"react-router\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { removeVampire, updateVampire } from \"vampire/vampire-slice\";\nimport { Vampire } from \"../vampire/vampire-model\";\n\nexport interface VampireFormProps {\n  vampire: Vampire;\n}\n\nexport function VampireForm({ vampire }: VampireFormProps) {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const [name, setName] = useState(vampire.name);\n  const [description, setDescription] = useState(vampire.description);\n\n  useEffect(() => {\n    setName(vampire.name);\n    setDescription(vampire.description);\n  }, [vampire]);\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setName(value);\n    dispatch(updateVampire({ id: vampire.id, name: value }));\n  };\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(updateVampire({ id: vampire.id, description: value }));\n  };\n\n  const handleDelete = async () => {\n    await dispatch(removeVampire(vampire.id));\n    navigate(\"/vampires\");\n  };\n\n  return (\n    <>\n      <FormGroup>\n        <FormLabel>Name</FormLabel>\n        <FormControl\n          as={DebounceInput}\n          forceNotifyByEnter={false}\n          debounceTimeout={1000}\n          placeholder=\"Name your vampire...\"\n          value={name}\n          onChange={handleNameChange}\n        />\n      </FormGroup>\n\n      <FormGroup className=\"mt-3\">\n        <FormLabel>Description</FormLabel>\n        <FormControl\n          as={DebounceInput}\n          forceNotifyByEnter={false}\n          element={TextareaAutosize as any}\n          debounceTimeout={1000}\n          placeholder=\"Describe your vampire...\"\n          value={description}\n          onChange={handleDescriptionChange}\n        />\n      </FormGroup>\n\n      <OverlayTrigger\n        placement=\"bottom\"\n        delay={OVERLAY_DELAY}\n        overlay={<Tooltip>Remove this Vampire</Tooltip>}\n      >\n        <Button\n          variant=\"outline-danger\"\n          className=\"mt-3\"\n          onClick={handleDelete}\n        >\n          Delete\n        </Button>\n      </OverlayTrigger>\n    </>\n  );\n}\n","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport { useEffect } from \"react\";\nimport {\n  Button,\n  Accordion,\n  Row,\n  Col,\n  Spinner,\n  Container,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport AccordionBody from \"react-bootstrap/esm/AccordionBody\";\nimport AccordionHeader from \"react-bootstrap/esm/AccordionHeader\";\nimport AccordionItem from \"react-bootstrap/esm/AccordionItem\";\nimport { useParams } from \"react-router\";\nimport { CharacterList } from \"./CharacterList\";\nimport { CreationCard } from \"./CreationCard\";\nimport { VAMPIRE_MEMORY_CAPACITY } from \"./diary-constants\";\nimport {\n  experienceSelectors,\n  markSelectors,\n  selectCurrentEvent,\n  selectSkills,\n  selectVampire,\n  selectMemories,\n  selectResources,\n  selectCharacters,\n} from \"./diary-slice\";\nimport {\n  characterThunk,\n  markThunk,\n  memoryThunk,\n  resourceThunk,\n  retrieveDeepVampire,\n  skillThunk,\n} from \"./diary-thunk\";\nimport { JournalCard } from \"./JournalCard\";\nimport { MarkList } from \"./MarkList\";\nimport { MemoryList } from \"./MemoryList\";\nimport { ResourceList } from \"./ResourceList\";\nimport { SkillList } from \"./SkillList\";\nimport { VampireForm } from \"./VampireForm\";\n\nexport function DiaryPage() {\n  const { id } = useParams();\n  const vampireId = parseInt(id!);\n\n  const dispatch = useAppDispatch();\n\n  const vampire = useAppSelector(selectVampire);\n  const currentEvent = useAppSelector(selectCurrentEvent);\n\n  const memories = useAppSelector(selectMemories);\n  const hasMaxMemories = memories.length >= VAMPIRE_MEMORY_CAPACITY;\n\n  const experiences = useAppSelector(experienceSelectors.selectAll);\n  const skills = useAppSelector(selectSkills);\n  const characters = useAppSelector(selectCharacters);\n  const resources = useAppSelector(selectResources);\n  const marks = useAppSelector(markSelectors.selectAll);\n\n  useEffect(() => {\n    dispatch(retrieveDeepVampire(vampireId));\n  }, [vampireId, dispatch]);\n\n  const handleCreateMemory = () =>\n    dispatch(memoryThunk.create({ vampire: vampireId }));\n\n  const handleCreateSkill = () =>\n    dispatch(skillThunk.create({ vampire: vampireId, description: \"\" }));\n\n  const handleCreateResource = () =>\n    dispatch(\n      resourceThunk.create({\n        vampire: vampireId,\n        description: \"\",\n        isDiary: false,\n      })\n    );\n\n  const handleCreateCharacter = () =>\n    dispatch(\n      characterThunk.create({\n        vampire: vampireId,\n        name: \"\",\n        description: \"\",\n        isImmortal: false,\n      })\n    );\n\n  const handleCreateMark = () =>\n    dispatch(markThunk.create({ vampire: vampireId, description: \"\" }));\n\n  if (!vampire) {\n    return <Spinner animation=\"border\" />;\n  }\n\n  return (\n    <Container className=\"my-3\">\n      <Row>\n        <Col md className=\"mb-3\">\n          <Accordion defaultActiveKey=\"vampire\">\n            <AccordionItem eventKey=\"vampire\">\n              <AccordionHeader>Vampire</AccordionHeader>\n              <AccordionBody>\n                <VampireForm vampire={vampire} />\n              </AccordionBody>\n            </AccordionItem>\n            <AccordionItem eventKey=\"memories\">\n              <AccordionHeader>Memories</AccordionHeader>\n              <AccordionBody>\n                <OverlayTrigger\n                  placement=\"right\"\n                  delay={OVERLAY_DELAY}\n                  overlay={\n                    <Tooltip>\n                      {hasMaxMemories\n                        ? \"A Vampire can only remember five Memories\"\n                        : \"Add a new Memory\"}\n                    </Tooltip>\n                  }\n                >\n                  <span className=\"d-inline-block\">\n                    <Button\n                      disabled={hasMaxMemories}\n                      variant=\"outline-success\"\n                      onClick={handleCreateMemory}\n                    >\n                      Create\n                    </Button>\n                  </span>\n                </OverlayTrigger>\n                <MemoryList memories={memories} experiences={experiences} />\n              </AccordionBody>\n            </AccordionItem>\n            <AccordionItem eventKey=\"skills\">\n              <AccordionHeader>Skills</AccordionHeader>\n              <AccordionBody>\n                <OverlayTrigger\n                  placement=\"right\"\n                  delay={OVERLAY_DELAY}\n                  overlay={<Tooltip>Add a new Skill</Tooltip>}\n                >\n                  <Button variant=\"outline-success\" onClick={handleCreateSkill}>\n                    Create\n                  </Button>\n                </OverlayTrigger>\n                <SkillList skills={skills} />\n              </AccordionBody>\n            </AccordionItem>\n            <AccordionItem eventKey=\"resources\">\n              <AccordionHeader>Resources</AccordionHeader>\n              <AccordionBody>\n                <OverlayTrigger\n                  placement=\"right\"\n                  delay={OVERLAY_DELAY}\n                  overlay={<Tooltip>Add a new Resource</Tooltip>}\n                >\n                  <Button\n                    variant=\"outline-success\"\n                    onClick={handleCreateResource}\n                  >\n                    Create\n                  </Button>\n                </OverlayTrigger>\n                <ResourceList resources={resources} />\n              </AccordionBody>\n            </AccordionItem>\n            <AccordionItem eventKey=\"characters\">\n              <AccordionHeader>Characters</AccordionHeader>\n              <AccordionBody>\n                <OverlayTrigger\n                  placement=\"right\"\n                  delay={OVERLAY_DELAY}\n                  overlay={<Tooltip>Add a new Character</Tooltip>}\n                >\n                  <Button\n                    variant=\"outline-success\"\n                    onClick={handleCreateCharacter}\n                  >\n                    Create\n                  </Button>\n                </OverlayTrigger>\n                <CharacterList characters={characters} />\n              </AccordionBody>\n            </AccordionItem>\n            <AccordionItem eventKey=\"marks\">\n              <AccordionHeader>Marks</AccordionHeader>\n              <AccordionBody>\n                <OverlayTrigger\n                  placement=\"right\"\n                  delay={OVERLAY_DELAY}\n                  overlay={<Tooltip>Add a new Mark</Tooltip>}\n                >\n                  <Button variant=\"outline-success\" onClick={handleCreateMark}>\n                    Create\n                  </Button>\n                </OverlayTrigger>\n                <MarkList marks={marks} />\n              </AccordionBody>\n            </AccordionItem>\n          </Accordion>\n        </Col>\n        <Col md>\n          {currentEvent ? (\n            <JournalCard vampireId={vampireId} currentEvent={currentEvent} />\n          ) : (\n            <CreationCard vampireId={vampireId} />\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import { FetchApi } from \"common/fetch\";\nimport { QueryParams, QueryResponse } from \"common/query\";\nimport { prepareUrl } from \"common/query\";\nimport { PromptGroup } from \"./prompt-group-model\";\n\nexport const PROMPT_GROUPS_URL = \"/api/v1/game/prompt-groups/\";\n\nexport async function queryPromptGroupsApi(\n  fetchApi: FetchApi,\n  queryParams?: QueryParams\n): Promise<QueryResponse<PromptGroup>> {\n  const url = prepareUrl(PROMPT_GROUPS_URL, queryParams);\n  const res = await fetchApi(url);\n  return res.json();\n}\n","import {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from \"@reduxjs/toolkit\";\nimport { authFetchApi } from \"auth/slice\";\nimport { RootState } from \"app/store\";\nimport { queryPromptGroupsApi } from \"./prompt-group-api\";\nimport { PromptGroup } from \"./prompt-group-model\";\nimport { QueryParams } from \"common/query\";\n\nexport const promptGroupAdapter = createEntityAdapter<PromptGroup>({\n  selectId: (promptGroup) => promptGroup.id,\n  sortComparer: (a, b) => a.id - b.id,\n});\n\nexport const queryPromptGroups = createAsyncThunk(\n  \"promptGroup/queryPromptGroups\",\n  (params: QueryParams | undefined, thunkApi) => {\n    const fetchApi = authFetchApi(thunkApi);\n    return queryPromptGroupsApi(fetchApi, params);\n  }\n);\n\nexport const promptGroupSlice = createSlice({\n  name: \"promptGroup\",\n  initialState: promptGroupAdapter.getInitialState(),\n  reducers: {},\n  extraReducers: (builder) =>\n    builder.addCase(queryPromptGroups.fulfilled, (state, action) => {\n      promptGroupAdapter.setAll(state, action.payload.results);\n    }),\n});\n\nexport const promptGroupSelectors = promptGroupAdapter.getSelectors<RootState>(\n  (state) => state.promptGroup\n);\n","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { promptGroupSelectors, queryPromptGroups } from \"./prompt-group-slice\";\nimport { useEffect, useState } from \"react\";\nimport {\n  FormControl,\n  FormGroup,\n  FormLabel,\n  Button,\n  Container,\n  FormSelect,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { CreateVampireFormData } from \"./vampire-model\";\nimport { OVERLAY_DELAY } from \"common/constants\";\n\nexport interface CreateVampireFormProps {\n  onCancel?: () => void;\n  onSubmit?: (formData: CreateVampireFormData) => void;\n}\n\nexport function CreateVampireForm({\n  onCancel,\n  onSubmit,\n}: CreateVampireFormProps) {\n  const dispatch = useAppDispatch();\n  const allPromptGroups = useAppSelector(promptGroupSelectors.selectAll);\n\n  const [name, setName] = useState<string | null>(null);\n  const [promptGroup, setPromptGroup] = useState<number | null>(null);\n\n  const isFormComplete = () => name && promptGroup !== null;\n\n  useEffect(() => {\n    dispatch(queryPromptGroups());\n  }, [dispatch]);\n\n  return (\n    <Container className=\"py-3\">\n      <h2>Create Vampire</h2>\n\n      <FormGroup>\n        <FormLabel>Name</FormLabel>\n        <FormControl\n          placeholder=\"Enter a name...\"\n          onChange={(event) => setName(event.target.value)}\n        />\n      </FormGroup>\n\n      <FormGroup className=\"mt-3\">\n        <FormLabel>Prompt Group</FormLabel>\n        <FormSelect\n          onChange={(event) => {\n            let promptGroup = null;\n            if (event.target.value !== \"\") {\n              promptGroup = parseInt(event.target.value);\n            }\n            setPromptGroup(promptGroup);\n          }}\n        >\n          <option value=\"\">Select a prompt group...</option>\n          {allPromptGroups.map((promptGroup) => (\n            <option key={promptGroup.id} value={promptGroup.id}>\n              {promptGroup.name}\n            </option>\n          ))}\n        </FormSelect>\n      </FormGroup>\n\n      <OverlayTrigger\n        placement=\"bottom\"\n        delay={OVERLAY_DELAY}\n        overlay={<Tooltip>Discard changes</Tooltip>}\n      >\n        <Button variant=\"outline-danger\" className=\"mt-3\" onClick={onCancel}>\n          Cancel\n        </Button>\n      </OverlayTrigger>\n\n      <OverlayTrigger\n        placement=\"bottom\"\n        delay={OVERLAY_DELAY}\n        overlay={<Tooltip>Go to the Diary page</Tooltip>}\n      >\n        <Button\n          variant=\"outline-success\"\n          className=\"mt-3 ms-3\"\n          disabled={!isFormComplete()}\n          onClick={() => {\n            onSubmit &&\n              onSubmit({\n                name: name as string,\n                description: \"\",\n                promptGroup: promptGroup as number,\n              });\n          }}\n        >\n          Create\n        </Button>\n      </OverlayTrigger>\n    </Container>\n  );\n}\n","import \"./VampireList.css\";\n\nimport { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { useEffect } from \"react\";\nimport { queryVampires, vampireSelectors } from \"./vampire-slice\";\nimport { Table } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router\";\n\nexport function VampireList() {\n  const dispatch = useAppDispatch();\n  const allVampires = useAppSelector(vampireSelectors.selectAll);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    dispatch(\n      queryVampires({\n        sort: [\"created_at\", \"-\"],\n      })\n    );\n  }, [dispatch]);\n\n  return (\n    <Table striped bordered hover>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Game Over</th>\n        </tr>\n      </thead>\n      <tbody>\n        {allVampires.map((vampire) => (\n          <tr\n            className=\"vampire-list-item\"\n            key={vampire.id}\n            onClick={() => navigate(`/vampires/${vampire.id}`)}\n          >\n            <td>{vampire.name}</td>\n            <td>{vampire.description}</td>\n            <td>{vampire.isDead ? \"Yes\" : \"No\"}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n","import { useAppDispatch } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport { useState } from \"react\";\nimport {\n  Container,\n  Button,\n  Modal,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { useNavigate } from \"react-router\";\nimport { CreateVampireForm } from \"./CreateVampireForm\";\nimport { CreateVampireFormData } from \"./vampire-model\";\nimport { createVampire } from \"./vampire-slice\";\nimport { VampireList } from \"./VampireList\";\n\nexport function VampirePage() {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const [show, setShow] = useState(false);\n\n  const showModal = () => setShow(true);\n  const hideModal = () => setShow(false);\n\n  const handleCreate = async (formData: CreateVampireFormData) => {\n    const vampire = await dispatch(createVampire(formData)).unwrap();\n    hideModal();\n    navigate(`/vampires/${vampire.id}`);\n  };\n\n  return (\n    <Container className=\"mt-3\">\n      <OverlayTrigger\n        placement=\"bottom\"\n        delay={OVERLAY_DELAY}\n        overlay={<Tooltip>Create a new Vampire</Tooltip>}\n      >\n        <Button variant=\"outline-success\" className=\"mb-3\" onClick={showModal}>\n          Create\n        </Button>\n      </OverlayTrigger>\n\n      <VampireList />\n\n      <Modal show={show} onHide={hideModal}>\n        <CreateVampireForm onCancel={hideModal} onSubmit={handleCreate} />\n      </Modal>\n    </Container>\n  );\n}\n","import { logout, selectIsLoggedIn } from \"auth/slice\";\nimport { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nexport function NavHeader() {\n  const isLoggedIn = useAppSelector(selectIsLoggedIn);\n  const dispatch = useAppDispatch();\n\n  const onLogout = () => dispatch(logout());\n\n  return (\n    <Navbar bg=\"light\" expand=\"lg\" fixed=\"top\">\n      <Container>\n        <Navbar.Brand href=\"/\">Vampire Diary</Navbar.Brand>\n        <Navbar.Toggle />\n        <Navbar.Collapse>\n          <Nav>\n            {isLoggedIn ? (\n              <Nav.Link as={Link} to=\"/vampires\">\n                Vampires\n              </Nav.Link>\n            ) : null}\n          </Nav>\n          <Nav className=\"ms-auto\">\n            {isLoggedIn ? (\n              <>\n                <Nav.Link as={Link} to=\"/settings\">\n                  Account\n                </Nav.Link>\n                <Nav.Link href=\"#\" onClick={onLogout}>\n                  Logout\n                </Nav.Link>\n              </>\n            ) : (\n              <>\n                <Nav.Link as={Link} to=\"/register\">\n                  Register\n                </Nav.Link>\n                <Nav.Link as={Link} to=\"/login\">\n                  Login\n                </Nav.Link>{\" \"}\n              </>\n            )}\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n","import { Login } from \"auth/Login\";\nimport { PrivateRoute } from \"auth/PrivateRoute\";\nimport { selectIsLoggedIn } from \"auth/slice\";\nimport { DiaryPage } from \"diary/DiaryPage\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport { VampirePage } from \"vampire/VampirePage\";\nimport { useAppSelector } from \"./hooks\";\nimport { NavHeader } from \"./NavHeader\";\n\nexport function App() {\n  const isLoggedIn = useAppSelector(selectIsLoggedIn);\n\n  return (\n    <>\n      <BrowserRouter>\n        <NavHeader />\n        <Routes>\n          <Route\n            path=\"/vampires/:id\"\n            element={\n              <PrivateRoute>\n                <DiaryPage />\n              </PrivateRoute>\n            }\n          />\n          <Route\n            path=\"/vampires\"\n            element={\n              <PrivateRoute>\n                <VampirePage />\n              </PrivateRoute>\n            }\n          />\n          <Route path=\"/settings\" />\n          <Route path=\"/login\" element={<Login />} />\n          <Route\n            path=\"*\"\n            element={<Navigate to={isLoggedIn ? \"/vampires\" : \"/login\"} />}\n          />\n        </Routes>\n      </BrowserRouter>\n    </>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { authSlice } from \"auth/slice\";\nimport { diarySlice } from \"diary/diary-slice\";\nimport { promptGroupSlice } from \"vampire/prompt-group-slice\";\nimport { vampireSlice } from \"vampire/vampire-slice\";\n\nexport const store = configureStore({\n  reducer: {\n    auth: authSlice.reducer,\n    promptGroup: promptGroupSlice.reducer,\n    vampire: vampireSlice.reducer,\n    diary: diarySlice.reducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { App } from \"./app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store } from \"./app/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}