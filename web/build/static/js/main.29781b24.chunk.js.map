{"version":3,"sources":["app/hooks.ts","common/fetch.ts","auth/api.ts","auth/slice.ts","auth/Login.tsx","auth/PrivateRoute.tsx","common/constants.ts","common/thunk.ts","common/query.ts","common/api.ts","diary/diary-api.ts","diary/diary-thunk.ts","diary/CharacterCard.tsx","diary/CharacterList.tsx","diary/CreationCard.tsx","common/slice.ts","vampire/vampire-slice.ts","diary/diary-slice.ts","diary/diary-constants.ts","diary/JournalCard.tsx","diary/MarkCard.tsx","diary/MarkList.tsx","diary/ExperienceForm.tsx","diary/ExperienceList.tsx","diary/MemoryCard.tsx","diary/MemoryList.tsx","diary/ResourceCard.tsx","diary/ResourceList.tsx","diary/SkillCard.tsx","diary/SkillList.tsx","diary/VampireForm.tsx","diary/DiaryPage.tsx","vampire/prompt-group-api.ts","vampire/prompt-group-slice.ts","vampire/CreateVampireForm.tsx","vampire/VampireList.tsx","vampire/VampirePage.tsx","app/NavHeader.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","buildFetch","baseHeaders","resource","init","fetchOptions","headers","fetch","loginApi","fetchApi","formData","a","method","body","JSON","stringify","res","json","ok","Error","logoutApi","AUTH_TOKEN_KEY","login","createAsyncThunk","arg","_thunkApi","Accept","localStorage","setItem","key","authFetchApi","thunkApi","token","getState","auth","Authorization","buildAuthHeader","buildAuthFetch","logout","_arg","removeItem","authSlice","createSlice","name","initialState","getItem","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","_action","selectIsLoggedIn","Login","isLoggedIn","dispatch","useState","username","setUsername","password","setPassword","to","Container","Form","FormGroup","className","Label","Control","placeholder","onChange","event","target","value","type","Button","variant","onClick","PrivateRoute","children","OVERLAY_DELAY","show","hide","createCrudThunk","crudApi","queryApi","createApi","retrieveApi","updateApi","removeApi","query","params","create","retrieve","id","update","remove","prepareUrl","url","queryParams","searchParams","undefined","record","modified","search","filter","Object","entries","toString","sort","limit","offset","URLSearchParams","createSearchParams","createCrudApi","baseUrl","queryUrl","detail","entityUrl","eventApi","memoryApi","experienceApi","skillApi","resourceApi","characterApi","markApi","retrieveDeepVampire","retrieveDeepVampireApi","eventThunk","memoryThunk","experienceThunk","skillThunk","resourceThunk","characterThunk","markThunk","CharacterCard","character","isImmortal","setIsImmortal","description","setDescription","useEffect","Card","Body","OverlayTrigger","placement","delay","overlay","Tooltip","isDead","ToggleButton","checked","disabled","Text","FormControl","as","DebounceInput","forceNotifyByEnter","debounceTimeout","element","TextareaAutosize","CharacterList","characters","map","CreationCard","vampireId","Header","vampire","adapter","createEntityAdapter","selectId","entity","slice","getInitialState","setAll","results","addOne","setOne","removeOne","createCrudApiSlice","vampireAdapter","queryVampires","createVampire","updateVampire","removeVampire","vampireSlice","vampireSelectors","getSelectors","eventAdapter","memoryAdapter","memory","experienceAdapter","experience","skillAdapter","skill","resourceAdapter","characterAdapter","markAdapter","mark","registerCrudThunk","crudThunk","entityState","upsertOne","diarySlice","currentEventIndex","showAllMemories","showAllSkills","showAllResources","showDiaryMemories","showAllCharacters","eventStart","eventEnd","ids","length","eventBack","eventForward","toggleShowAllMemories","toggleShowAllSkills","toggleShowAllResources","toggleShowDiaryMemories","toggleShowAllCharacters","diaryBuilder","deepVampire","events","lastEventIndex","memories","experiences","skills","resources","marks","actions","selectVampire","diary","selectIsDead","selectIsExhausted","selectSkills","selectResources","selectIsFirstEvent","selectIsLastEvent","selectCurrentEvent","index","entities","selectPreviousEvent","previousIndex","previousId","memorySelectors","selectShowAllMemories","selectShowAllSkills","selectShowAllResources","selectShowDiaryMemories","selectShowAllCharacters","selectMemories","allMemories","selectAll","isForgotten","experienceSelectors","skillSelectors","allSkills","isChecked","resourceSelectors","allResources","isLost","selectCurrentDiary","find","isDiary","selectCurrentDiaryMemories","selectCurrentDiaryIsFull","characterSelectors","selectCharacters","allCharacters","markSelectors","JournalCard","currentEvent","isFirstEvent","isLastEvent","isGameOver","isExhausted","previousEvent","bg","text","prompt","visit","ButtonGroup","promptDescription","MarkCard","MarkList","ExperienceForm","ExperienceList","MemoryCard","isDiaryFull","hasMaxExperiences","MemoryList","experienceMap","reduce","existing","get","push","set","Map","ResourceCard","setIsDiary","hasOtherDiary","showMemories","ResourceList","SkillCard","Row","Col","xs","SkillList","VampireForm","setName","FormLabel","DiaryPage","useParams","parseInt","hasMaxMemories","fluid","md","Accordion","defaultActiveKey","AccordionItem","eventKey","AccordionHeader","AccordionBody","Spinner","animation","PROMPT_GROUPS_URL","promptGroupAdapter","promptGroup","sortComparer","b","queryPromptGroups","queryPromptGroupsApi","promptGroupSlice","promptGroupSelectors","CreateVampireForm","onCancel","onSubmit","allPromptGroups","setPromptGroup","FormSelect","VampireList","allVampires","navigate","useNavigate","Table","hover","stopPropagation","handleDelete","VampirePage","setShow","hideModal","handleCreate","unwrap","Modal","onHide","NavHeader","Navbar","expand","fixed","Brand","href","Toggle","Collapse","Nav","Link","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29781b24.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"app/store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export type FetchApi = typeof fetch;\n\nexport type HeaderRecord = Record<string, string>;\n\nexport function buildFetch(baseHeaders: HeaderRecord): FetchApi {\n  return function (resource, init) {\n    const fetchOptions = init ?? {};\n    fetchOptions.headers = {\n      ...baseHeaders,\n      ...(fetchOptions.headers ?? {}),\n    };\n    return fetch(resource, fetchOptions);\n  };\n}\n\nexport function buildBaseHeaders(): HeaderRecord {\n  return {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  };\n}\n\nexport function buildAuthHeader(token: string): HeaderRecord {\n  return {\n    Authorization: `Token ${token}`,\n  };\n}\n\nexport function buildBaseFetch(): FetchApi {\n  return buildFetch(buildBaseHeaders());\n}\n\nexport function buildAuthFetch(token: string): FetchApi {\n  return buildFetch({\n    ...buildBaseHeaders(),\n    ...buildAuthHeader(token),\n  });\n}\n","import { FetchApi } from \"common/fetch\";\nimport { LoginFormData, TokenResponse } from \"./model\";\n\nexport async function loginApi(\n  fetchApi: FetchApi,\n  formData: LoginFormData\n): Promise<TokenResponse> {\n  const res = await fetchApi(\"/api/v1/auth/login/\", {\n    method: \"POST\",\n    body: JSON.stringify(formData),\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(json);\n  }\n  return json;\n}\n\nexport async function logoutApi(fetchApi: FetchApi): Promise<void> {\n  await fetchApi(\"/api/v1/auth/logout/\", {\n    method: \"POST\",\n  });\n}\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { buildAuthFetch, buildBaseFetch, FetchApi } from \"common/fetch\";\nimport { ThunkApi } from \"common/thunk\";\nimport { RootState } from \"app/store\";\nimport { loginApi, logoutApi } from \"./api\";\nimport { LoginFormData } from \"./model\";\n\nexport interface AuthState {\n  token: string | null;\n}\n\nexport const AUTH_TOKEN_KEY = \"vampire-diary-auth-token\";\n\nexport function getInitialAuthState(): AuthState {\n  return {\n    token: localStorage.getItem(AUTH_TOKEN_KEY),\n  };\n}\n\nexport const login = createAsyncThunk(\n  \"auth/login\",\n  async (arg: LoginFormData, _thunkApi) => {\n    const fetchApi = buildBaseFetch();\n    const res = await loginApi(fetchApi, arg);\n    localStorage.setItem(AUTH_TOKEN_KEY, res.key);\n    return res;\n  }\n);\n\nexport function authFetchApi(thunkApi: ThunkApi): FetchApi {\n  const state = thunkApi.getState() as RootState;\n  const token = state.auth.token;\n  if (token === null) {\n    throw new Error(\"Must be logged in\");\n  }\n  return buildAuthFetch(token);\n}\n\nexport const logout = createAsyncThunk<void, void, {}>(\n  \"auth/logout\",\n  async (_arg, thunkApi) => {\n    const fetchApi = authFetchApi(thunkApi);\n    await logoutApi(fetchApi);\n    localStorage.removeItem(AUTH_TOKEN_KEY);\n  }\n);\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState: getInitialAuthState(),\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      .addCase(login.fulfilled, (state, action) => {\n        state.token = action.payload.key;\n      })\n      .addCase(logout.fulfilled, (state, _action) => {\n        state.token = null;\n      }),\n});\n\nexport function selectIsLoggedIn(state: RootState): boolean {\n  return state.auth.token !== null;\n}\n","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { useState } from \"react\";\nimport { Form, FormGroup, Button, Container } from \"react-bootstrap\";\nimport { Navigate } from \"react-router\";\nimport { login, selectIsLoggedIn } from \"./slice\";\n\nexport function Login() {\n  const isLoggedIn = useAppSelector(selectIsLoggedIn);\n  const dispatch = useAppDispatch();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const onSubmit = () => dispatch(login({ username, password }));\n\n  if (isLoggedIn) {\n    return <Navigate to=\"/vampires\" />;\n  }\n\n  return (\n    <Container>\n      <Form>\n        <FormGroup className=\"mt-3\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control\n            placeholder=\"Username\"\n            onChange={(event) => setUsername(event.target.value)}\n          />\n        </FormGroup>\n\n        <FormGroup className=\"mt-3\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Password\"\n            onChange={(event) => setPassword(event.target.value)}\n          />\n        </FormGroup>\n\n        <Button variant=\"outline-primary\" className=\"mt-3\" onClick={onSubmit}>\n          Log In\n        </Button>\n      </Form>\n    </Container>\n  );\n}\n","import { useAppSelector } from \"app/hooks\";\nimport { Navigate } from \"react-router\";\nimport { selectIsLoggedIn } from \"./slice\";\n\nexport function PrivateRoute({ children }: { children: JSX.Element }) {\n  const isLoggedIn = useAppSelector(selectIsLoggedIn);\n  if (!isLoggedIn) {\n    return <Navigate to=\"/login\" />;\n  }\n  return children;\n}\n","import { OverlayDelay } from \"react-bootstrap/esm/OverlayTrigger\";\n\nexport const OVERLAY_DELAY: OverlayDelay = {\n  show: 500,\n  hide: 0,\n};\n","import { AsyncThunk, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { authFetchApi } from \"auth/slice\";\nimport { CrudApi } from \"./api\";\nimport { BaseEntity } from \"./entity\";\nimport { QueryParams, QueryResponse } from \"./query\";\n\nexport interface ThunkApi {\n  getState(): unknown;\n}\n\nexport type QueryThunk<Entity extends BaseEntity> = AsyncThunk<\n  QueryResponse<Entity>,\n  QueryParams | undefined,\n  {}\n>;\n\nexport type CreateThunk<Entity extends BaseEntity, CreateEntity> = AsyncThunk<\n  Entity,\n  CreateEntity,\n  {}\n>;\n\nexport type RetrieveThunk<Entity extends BaseEntity> = AsyncThunk<\n  Entity,\n  number,\n  {}\n>;\n\nexport type UpdateThunk<Entity extends BaseEntity, UpdateEntity> = AsyncThunk<\n  Entity,\n  BaseEntity & Partial<UpdateEntity>,\n  {}\n>;\n\nexport type RemoveThunk = AsyncThunk<number, number, {}>;\n\nexport interface CrudThunk<\n  Entity extends BaseEntity,\n  CreateEntity,\n  UpdateEntity extends BaseEntity\n> {\n  query: QueryThunk<Entity>;\n  create: CreateThunk<Entity, CreateEntity>;\n  retrieve: RetrieveThunk<Entity>;\n  update: UpdateThunk<Entity, UpdateEntity>;\n  remove: RemoveThunk;\n}\n\nexport function createCrudThunk<\n  Entity extends BaseEntity,\n  CreateEntity,\n  UpdateEntity extends BaseEntity\n>(\n  name: string,\n  crudApi: CrudApi<Entity, CreateEntity, UpdateEntity>\n): CrudThunk<Entity, CreateEntity, UpdateEntity> {\n  const { queryApi, createApi, retrieveApi, updateApi, removeApi } = crudApi;\n\n  const query = createAsyncThunk(\n    `${name}/query`,\n    (params: QueryParams | undefined, thunkApi) => {\n      const fetchApi = authFetchApi(thunkApi);\n      return queryApi(fetchApi, params);\n    }\n  );\n\n  const create = createAsyncThunk(\n    `${name}/create`,\n    (formData: CreateEntity, thunkApi) => {\n      const fetchApi = authFetchApi(thunkApi);\n      return createApi(fetchApi, formData);\n    }\n  );\n\n  const retrieve = createAsyncThunk(\n    `${name}/retrieve`,\n    (id: number, thunkApi) => {\n      const fetchApi = authFetchApi(thunkApi);\n      return retrieveApi(fetchApi, id);\n    }\n  );\n\n  const update = createAsyncThunk(\n    `${name}/update`,\n    (formData: BaseEntity & Partial<UpdateEntity>, thunkApi) => {\n      const fetchApi = authFetchApi(thunkApi);\n      return updateApi(fetchApi, formData);\n    }\n  );\n\n  const remove = createAsyncThunk(\n    `${name}/remove`,\n    async (id: number, thunkApi) => {\n      const fetchApi = authFetchApi(thunkApi);\n      await removeApi(fetchApi, id);\n      return id;\n    }\n  );\n\n  return { query, create, retrieve, update, remove };\n}\n","export interface QueryResponse<Item> {\n  count: number;\n  prev: string | null;\n  next: string | null;\n  results: Item[];\n}\n\nexport type FilterValue = number | boolean | string;\n\nexport type SortDir = \"+\" | \"-\";\n\nexport interface QueryParams {\n  search?: string;\n  filter?: Record<string, FilterValue>;\n  sort?: [string, SortDir];\n  limit?: number;\n  offset?: number;\n}\n\nexport function createSearchParams(\n  queryParams: QueryParams\n): URLSearchParams | null {\n  const record: Record<string, string> = {};\n  let modified = false;\n\n  if (queryParams.search) {\n    modified = true;\n    record[\"search\"] = queryParams.search;\n  }\n\n  if (queryParams.filter) {\n    for (const [key, value] of Object.entries<FilterValue>(\n      queryParams.filter\n    )) {\n      modified = true;\n      record[key] = value.toString();\n    }\n  }\n\n  if (queryParams.sort) {\n    modified = true;\n    record[\"ordering\"] = `${queryParams.sort[1]}${queryParams.sort[0]}`;\n  }\n\n  if (queryParams.limit !== undefined) {\n    modified = true;\n    record[\"limit\"] = queryParams.limit.toString();\n  }\n\n  if (queryParams.offset !== undefined) {\n    modified = true;\n    record[\"offset\"] = queryParams.offset.toString();\n  }\n\n  if (!modified) {\n    return null;\n  }\n\n  return new URLSearchParams(record);\n}\n\nexport function prepareUrl(url: string, queryParams?: QueryParams): string {\n  let searchParams = null;\n  if (queryParams !== undefined) {\n    searchParams = createSearchParams(queryParams);\n  }\n\n  if (searchParams !== null) {\n    return `${url}?${searchParams}`;\n  }\n\n  return url;\n}\n","import { BaseEntity } from \"./entity\";\nimport { FetchApi } from \"./fetch\";\nimport { prepareUrl, QueryParams, QueryResponse } from \"./query\";\n\nexport type QueryApi<Entity extends BaseEntity> = (\n  fetchApi: FetchApi,\n  params?: QueryParams\n) => Promise<QueryResponse<Entity>>;\n\nexport type CreateApi<Entity extends BaseEntity, CreateEntity> = (\n  fetchApi: FetchApi,\n  formData: CreateEntity\n) => Promise<Entity>;\n\nexport type RetrieveApi<Entity extends BaseEntity> = (\n  fetchApi: FetchApi,\n  id: number\n) => Promise<Entity>;\n\nexport type UpdateApi<Entity extends BaseEntity, UpdateEntity> = (\n  fetchApi: FetchApi,\n  formData: BaseEntity & Partial<UpdateEntity>\n) => Promise<Entity>;\n\nexport type RemoveApi = (fetchApi: FetchApi, id: number) => Promise<void>;\n\nexport interface CrudApi<\n  Entity extends BaseEntity,\n  CreateEntity,\n  UpdateEntity extends BaseEntity\n> {\n  queryApi: QueryApi<Entity>;\n  createApi: CreateApi<Entity, CreateEntity>;\n  retrieveApi: RetrieveApi<Entity>;\n  updateApi: UpdateApi<Entity, UpdateEntity>;\n  removeApi: RemoveApi;\n}\n\nexport function createCrudApi<\n  Entity extends BaseEntity,\n  CreateEntity,\n  UpdateEntity extends BaseEntity\n>(baseUrl: string): CrudApi<Entity, CreateEntity, UpdateEntity> {\n  async function queryApi(\n    fetchApi: FetchApi,\n    params?: QueryParams\n  ): Promise<QueryResponse<Entity>> {\n    const queryUrl = prepareUrl(baseUrl, params);\n    const res = await fetchApi(queryUrl);\n    const json = await res.json();\n    if (!res.ok) {\n      throw new Error(json.detail);\n    }\n    return json;\n  }\n\n  async function createApi(\n    fetchApi: FetchApi,\n    formData: CreateEntity\n  ): Promise<Entity> {\n    const res = await fetchApi(baseUrl, {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n    });\n    const json = await res.json();\n    if (!res.ok) {\n      throw new Error(json.detail);\n    }\n    return json;\n  }\n\n  function entityUrl(id: number): string {\n    return `${baseUrl}${id}/`;\n  }\n\n  async function retrieveApi(fetchApi: FetchApi, id: number): Promise<Entity> {\n    const res = await fetchApi(entityUrl(id));\n    const json = await res.json();\n    if (!res.ok) {\n      throw new Error(json.detail);\n    }\n    return json;\n  }\n\n  async function updateApi(\n    fetchApi: FetchApi,\n    { id, ...formData }: BaseEntity & Partial<UpdateEntity>\n  ): Promise<Entity> {\n    const res = await fetchApi(entityUrl(id), {\n      method: \"PATCH\",\n      body: JSON.stringify(formData),\n    });\n    const json = await res.json();\n    if (!res.ok) {\n      throw new Error(json.detail);\n    }\n    return json;\n  }\n\n  async function removeApi(fetchApi: FetchApi, id: number): Promise<void> {\n    const res = await fetchApi(entityUrl(id), { method: \"DELETE\" });\n    if (!res.ok) {\n      const json = await res.json();\n      throw new Error(json.detail);\n    }\n  }\n\n  return {\n    queryApi,\n    createApi,\n    retrieveApi,\n    updateApi,\n    removeApi,\n  };\n}\n","import { createCrudApi } from \"common/api\";\nimport { FetchApi } from \"common/fetch\";\nimport {\n  Character,\n  CreateCharacterFormData,\n  CreateExperienceFormData,\n  CreateMarkFormData,\n  CreateMemoryFormData,\n  CreateResourceFormData,\n  CreateSkillFormData,\n  Experience,\n  DeepVampire,\n  Mark,\n  Memory,\n  Resource,\n  Skill,\n  UpdateCharacterFormData,\n  UpdateExperienceFormData,\n  UpdateMarkFormData,\n  UpdateMemoryFormData,\n  UpdateResourceFormData,\n  UpdateSkillFormData,\n  Event,\n  CreateEventFormData,\n  UpdateEventFormData,\n} from \"./diary-model\";\n\nexport async function retrieveDeepVampireApi(\n  fetchApi: FetchApi,\n  id: number\n): Promise<DeepVampire> {\n  const res = await fetchApi(`/api/v1/game/vampires/${id}/deep/`);\n  return res.json();\n}\n\nfunction baseUrl(resource: string): string {\n  return `/api/v1/game/${resource}/`;\n}\n\nexport const eventApi = createCrudApi<\n  Event,\n  CreateEventFormData,\n  UpdateEventFormData\n>(baseUrl(\"events\"));\n\nexport const memoryApi = createCrudApi<\n  Memory,\n  CreateMemoryFormData,\n  UpdateMemoryFormData\n>(baseUrl(\"memories\"));\n\nexport const experienceApi = createCrudApi<\n  Experience,\n  CreateExperienceFormData,\n  UpdateExperienceFormData\n>(baseUrl(\"experiences\"));\n\nexport const skillApi = createCrudApi<\n  Skill,\n  CreateSkillFormData,\n  UpdateSkillFormData\n>(baseUrl(\"skills\"));\n\nexport const resourceApi = createCrudApi<\n  Resource,\n  CreateResourceFormData,\n  UpdateResourceFormData\n>(baseUrl(\"resources\"));\n\nexport const characterApi = createCrudApi<\n  Character,\n  CreateCharacterFormData,\n  UpdateCharacterFormData\n>(baseUrl(\"characters\"));\n\nexport const markApi = createCrudApi<\n  Mark,\n  CreateMarkFormData,\n  UpdateMarkFormData\n>(baseUrl(\"marks\"));\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { authFetchApi } from \"auth/slice\";\nimport { createCrudThunk } from \"common/thunk\";\nimport {\n  characterApi,\n  eventApi,\n  experienceApi,\n  markApi,\n  memoryApi,\n  resourceApi,\n  retrieveDeepVampireApi,\n  skillApi,\n} from \"./diary-api\";\n\nexport const retrieveDeepVampire = createAsyncThunk(\n  \"diary/retrieveDeepVampire\",\n  (id: number, thunkApi) => {\n    const fetchApi = authFetchApi(thunkApi);\n    return retrieveDeepVampireApi(fetchApi, id);\n  }\n);\n\nexport const eventThunk = createCrudThunk(\"event\", eventApi);\n\nexport const memoryThunk = createCrudThunk(\"memory\", memoryApi);\n\nexport const experienceThunk = createCrudThunk(\"experience\", experienceApi);\n\nexport const skillThunk = createCrudThunk(\"skill\", skillApi);\n\nexport const resourceThunk = createCrudThunk(\"resource\", resourceApi);\n\nexport const characterThunk = createCrudThunk(\"character\", characterApi);\n\nexport const markThunk = createCrudThunk(\"mark\", markApi);\n","import { useAppDispatch } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Card,\n  FormControl,\n  FormGroup,\n  ToggleButton,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { Character } from \"./diary-model\";\nimport { characterThunk } from \"./diary-thunk\";\n\nexport interface CharacterCardProps {\n  character: Character;\n}\n\nexport function CharacterCard({ character }: CharacterCardProps) {\n  const dispatch = useAppDispatch();\n\n  const [isImmortal, setIsImmortal] = useState(character.isImmortal);\n  const [description, setDescription] = useState(character.description);\n\n  useEffect(() => {\n    setIsImmortal(character.isImmortal);\n  }, [character]);\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(characterThunk.update({ id: character.id, description: value }));\n  };\n\n  const handleDead = () =>\n    dispatch(\n      characterThunk.update({ id: character.id, isDead: !character.isDead })\n    );\n\n  const toggleIsImmortal = () => {\n    const value = !isImmortal;\n    dispatch(characterThunk.update({ id: character.id, isImmortal: value }));\n  };\n\n  return (\n    <Card className=\"mt-3\">\n      <Card.Body>\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={OVERLAY_DELAY}\n          overlay={\n            <Tooltip>\n              {character.isDead\n                ? \"A dead Character cannot become immortal\"\n                : \"Immortal Characters cannot be removed\"}\n            </Tooltip>\n          }\n        >\n          <span className=\"d-inline-block\">\n            <ToggleButton\n              type=\"checkbox\"\n              variant=\"outline-secondary\"\n              value=\"1\"\n              checked={isImmortal}\n              onClick={toggleIsImmortal}\n              disabled={character.isDead}\n            >\n              <i className=\"bi bi-lock\"></i>\n              <span className=\"ms-2 d-none d-lg-inline\">Immortal</span>\n            </ToggleButton>\n          </span>\n        </OverlayTrigger>\n\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={OVERLAY_DELAY}\n          overlay={\n            <Tooltip>\n              {isImmortal\n                ? \"Immortal Characters cannot be removed\"\n                : \"Remove this Character\"}\n            </Tooltip>\n          }\n        >\n          <span className=\"d-inline-block\">\n            <ToggleButton\n              type=\"checkbox\"\n              variant=\"outline-danger\"\n              value=\"2\"\n              className=\"ms-3\"\n              disabled={isImmortal}\n              checked={character.isDead}\n              onClick={handleDead}\n            >\n              <i className=\"bi bi-x-lg\"></i>\n              <span className=\"ms-2 d-none d-lg-inline\">Dead</span>\n            </ToggleButton>\n          </span>\n        </OverlayTrigger>\n\n        {character.isDead ? (\n          <Card.Text className=\"text-muted mt-3\">\n            {character.description}\n          </Card.Text>\n        ) : (\n          <FormGroup className=\"mt-3\">\n            <FormControl\n              as={DebounceInput}\n              forceNotifyByEnter={false}\n              debounceTimeout={1000}\n              placeholder=\"Describe the character...\"\n              value={description}\n              onChange={handleDescriptionChange}\n              element={TextareaAutosize as any}\n            />\n          </FormGroup>\n        )}\n      </Card.Body>\n    </Card>\n  );\n}\n","import { CharacterCard } from \"./CharacterCard\";\nimport { Character } from \"./diary-model\";\n\nexport interface CharacterListProps {\n  characters: Character[];\n}\n\nexport function CharacterList({ characters }: CharacterListProps) {\n  return (\n    <>\n      {characters.map((character) => (\n        <CharacterCard key={character.id} character={character} />\n      ))}\n    </>\n  );\n}\n","import { useAppDispatch } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport { Card, Button, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { eventThunk } from \"./diary-thunk\";\n\nexport interface CreationCardProps {\n  vampireId: number;\n}\n\nexport function CreationCard({ vampireId }: CreationCardProps) {\n  const dispatch = useAppDispatch();\n\n  const handleStart = () => dispatch(eventThunk.create({ vampire: vampireId }));\n\n  return (\n    <Card>\n      <Card.Header>Creation</Card.Header>\n      <Card.Body>\n        <Card.Text>To create your Vampire:</Card.Text>\n\n        <ol>\n          <li>Give your Vampire a name and description</li>\n          <li>\n            Create a single Memory and Experience that describes your Vampire's\n            history as a mortal\n          </li>\n          <li>Create at least three mortal Characters</li>\n          <li>\n            Give your Vampire three Skills that they practiced as a mortal\n          </li>\n          <li>\n            Give your Vampire three Resources that they acquired as a mortal\n          </li>\n          <li>\n            Create three Memories, each with one Experience relating to any two\n            Characters, Skills and/or Resources that you have created\n          </li>\n          <li>\n            Create an immortal Character who gifted or cursed your Vampire with\n            undeath\n          </li>\n          <li>\n            Create a Mark, a Memory and an Experience relating to how your\n            Vampire was gifted or cursed with undeath\n          </li>\n        </ol>\n\n        <Card.Text>\n          Your Vampire should now have three Skills, three Resources, one Mark,\n          at least three mortal Characters, one immortal Character, and five\n          Memories each with one Experience.\n        </Card.Text>\n\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={OVERLAY_DELAY}\n          overlay={<Tooltip>Generate the first Prompt</Tooltip>}\n        >\n          <Button variant=\"outline-success\" onClick={handleStart}>\n            <i className=\"bi bi-caret-right me-2\"></i>\n            Start\n          </Button>\n        </OverlayTrigger>\n      </Card.Body>\n    </Card>\n  );\n}\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nimport { createCrudApi } from \"./api\";\nimport { BaseEntity } from \"./entity\";\nimport { createCrudThunk } from \"./thunk\";\n\nexport interface CreateCrudApiSliceOptions {\n  name: string;\n  baseUrl: string;\n}\n\nexport function createCrudApiSlice<\n  Entity extends BaseEntity,\n  CreateEntity,\n  UpdateEntity extends BaseEntity\n>({ name, baseUrl }: CreateCrudApiSliceOptions) {\n  const adapter = createEntityAdapter<Entity>({\n    selectId: (entity) => entity.id,\n  });\n\n  const api = createCrudApi<Entity, CreateEntity, UpdateEntity>(baseUrl);\n  const { query, create, retrieve, update, remove } = createCrudThunk(\n    name,\n    api\n  );\n\n  const slice = createSlice({\n    name,\n    initialState: adapter.getInitialState(),\n    reducers: {},\n    extraReducers: (builder) =>\n      builder\n        .addCase(query.fulfilled, (state: any, action: any) => {\n          adapter.setAll(state, action.payload.results);\n        })\n        .addCase(create.fulfilled, (state: any, action: any) => {\n          adapter.addOne(state, action.payload);\n        })\n        .addCase(retrieve.fulfilled, (state: any, action: any) => {\n          adapter.setOne(state, action.payload);\n        })\n        .addCase(update.fulfilled, (state: any, action: any) => {\n          adapter.setOne(state, action.payload);\n        })\n        .addCase(remove.fulfilled, (state: any, action: any) => {\n          adapter.removeOne(state, action.payload);\n        }),\n  });\n\n  return {\n    adapter,\n    query,\n    create,\n    retrieve,\n    update,\n    remove,\n    slice,\n  };\n}\n","import { RootState } from \"app/store\";\nimport { createCrudApiSlice } from \"common/slice\";\nimport {\n  CreateVampireFormData,\n  UpdateVampireFormData,\n  Vampire,\n} from \"./vampire-model\";\n\nexport const {\n  adapter: vampireAdapter,\n  query: queryVampires,\n  create: createVampire,\n  retrieve: retrieveVampire,\n  update: updateVampire,\n  remove: removeVampire,\n  slice: vampireSlice,\n} = createCrudApiSlice<Vampire, CreateVampireFormData, UpdateVampireFormData>({\n  name: \"vampire\",\n  baseUrl: \"/api/v1/game/vampires/\",\n});\n\nexport const vampireSelectors = vampireAdapter.getSelectors<RootState>(\n  (state) => state.vampire\n);\n","import {\n  ActionReducerMapBuilder,\n  createEntityAdapter,\n  createSlice,\n  EntityAdapter,\n  EntityState,\n} from \"@reduxjs/toolkit\";\nimport { RootState } from \"app/store\";\nimport { BaseEntity } from \"common/entity\";\nimport { CrudThunk } from \"common/thunk\";\nimport { Vampire } from \"vampire/vampire-model\";\nimport { updateVampire } from \"vampire/vampire-slice\";\nimport { DIARY_MEMORY_CAPACITY } from \"./diary-constants\";\nimport {\n  Character,\n  Event,\n  Experience,\n  Mark,\n  Memory,\n  Resource,\n  Skill,\n} from \"./diary-model\";\nimport {\n  characterThunk,\n  eventThunk,\n  experienceThunk,\n  markThunk,\n  memoryThunk,\n  resourceThunk,\n  retrieveDeepVampire,\n  skillThunk,\n} from \"./diary-thunk\";\n\nconst eventAdapter = createEntityAdapter<Event>({\n  selectId: (event) => event.id,\n});\n\nconst memoryAdapter = createEntityAdapter<Memory>({\n  selectId: (memory) => memory.id,\n});\n\nconst experienceAdapter = createEntityAdapter<Experience>({\n  selectId: (experience) => experience.id,\n});\n\nconst skillAdapter = createEntityAdapter<Skill>({\n  selectId: (skill) => skill.id,\n});\n\nconst resourceAdapter = createEntityAdapter<Resource>({\n  selectId: (resource) => resource.id,\n});\n\nconst characterAdapter = createEntityAdapter<Character>({\n  selectId: (character) => character.id,\n});\n\nconst markAdapter = createEntityAdapter<Mark>({\n  selectId: (mark) => mark.id,\n});\n\nexport interface DiaryState {\n  vampire: Vampire | undefined;\n\n  currentEventIndex: number | undefined;\n\n  showAllMemories: boolean;\n  showAllSkills: boolean;\n  showAllResources: boolean;\n  showDiaryMemories: boolean;\n  showAllCharacters: boolean;\n\n  event: EntityState<Event>;\n  memory: EntityState<Memory>;\n  experience: EntityState<Experience>;\n  skill: EntityState<Skill>;\n  resource: EntityState<Resource>;\n  character: EntityState<Character>;\n  mark: EntityState<Mark>;\n}\n\nexport function getInitialDiaryState(): DiaryState {\n  return {\n    vampire: undefined,\n\n    currentEventIndex: undefined,\n\n    showAllMemories: false,\n    showAllSkills: false,\n    showAllResources: false,\n    showDiaryMemories: false,\n    showAllCharacters: false,\n\n    event: eventAdapter.getInitialState(),\n    memory: memoryAdapter.getInitialState(),\n    experience: experienceAdapter.getInitialState(),\n    skill: skillAdapter.getInitialState(),\n    resource: resourceAdapter.getInitialState(),\n    character: characterAdapter.getInitialState(),\n    mark: markAdapter.getInitialState(),\n  };\n}\n\nfunction registerCrudThunk<Entity extends BaseEntity>(\n  builder: ActionReducerMapBuilder<DiaryState>,\n  getState: (state: DiaryState) => EntityState<Entity>,\n  adapter: EntityAdapter<Entity>,\n  crudThunk: CrudThunk<Entity, any, any>\n): ActionReducerMapBuilder<DiaryState> {\n  return builder\n    .addCase(crudThunk.create.fulfilled, (state, action) => {\n      const entityState = getState(state);\n      adapter.addOne(entityState, action.payload);\n    })\n    .addCase(crudThunk.update.fulfilled, (state, action) => {\n      const entityState = getState(state);\n      adapter.upsertOne(entityState, action.payload);\n    })\n    .addCase(crudThunk.remove.fulfilled, (state, action) => {\n      const entityState = getState(state);\n      adapter.removeOne(entityState, action.payload);\n    });\n}\n\nexport const diarySlice = createSlice({\n  name: \"diary\",\n  initialState: getInitialDiaryState(),\n  reducers: {\n    eventStart: (state) => {\n      if (state.currentEventIndex === undefined) {\n        return;\n      }\n      state.currentEventIndex = 0;\n    },\n    eventEnd: (state) => {\n      if (state.currentEventIndex === undefined) {\n        return;\n      }\n      state.currentEventIndex = state.event.ids.length - 1;\n    },\n    eventBack: (state) => {\n      if (\n        state.currentEventIndex === undefined ||\n        state.currentEventIndex === 0\n      ) {\n        return;\n      }\n      state.currentEventIndex--;\n    },\n    eventForward: (state) => {\n      if (\n        state.currentEventIndex === undefined ||\n        state.currentEventIndex >= state.event.ids.length - 1\n      ) {\n        return;\n      }\n      state.currentEventIndex++;\n    },\n    toggleShowAllMemories: (state) => {\n      state.showAllMemories = !state.showAllMemories;\n    },\n    toggleShowAllSkills: (state) => {\n      state.showAllSkills = !state.showAllSkills;\n    },\n    toggleShowAllResources: (state) => {\n      state.showAllResources = !state.showAllResources;\n    },\n    toggleShowDiaryMemories: (state) => {\n      state.showDiaryMemories = !state.showDiaryMemories;\n    },\n    toggleShowAllCharacters: (state) => {\n      state.showAllCharacters = !state.showAllCharacters;\n    },\n  },\n  extraReducers: (builder) => {\n    let diaryBuilder = builder.addCase(\n      retrieveDeepVampire.fulfilled,\n      (state, action) => {\n        const deepVampire = action.payload;\n\n        state.vampire = {\n          id: deepVampire.id,\n          name: deepVampire.name,\n          description: deepVampire.description,\n          isDead: deepVampire.isDead,\n        };\n\n        const events = deepVampire.events;\n        if (events.length > 0) {\n          const lastEventIndex = events.length - 1;\n          state.currentEventIndex = lastEventIndex;\n        }\n\n        eventAdapter.setAll(state.event, deepVampire.events);\n        memoryAdapter.setAll(state.memory, deepVampire.memories);\n        experienceAdapter.setAll(state.experience, deepVampire.experiences);\n        skillAdapter.setAll(state.skill, deepVampire.skills);\n        resourceAdapter.setAll(state.resource, deepVampire.resources);\n        characterAdapter.setAll(state.character, deepVampire.characters);\n        markAdapter.setAll(state.mark, deepVampire.marks);\n      }\n    );\n\n    diaryBuilder = diaryBuilder.addCase(\n      updateVampire.fulfilled,\n      (state, action) => {\n        state.vampire = action.payload;\n      }\n    );\n\n    diaryBuilder = diaryBuilder.addCase(\n      eventThunk.create.fulfilled,\n      (state, action) => {\n        eventAdapter.addOne(state.event, action.payload);\n        const lastEventIndex = state.event.ids.length - 1;\n        state.currentEventIndex = lastEventIndex;\n      }\n    );\n\n    diaryBuilder = diaryBuilder.addCase(\n      eventThunk.update.fulfilled,\n      (state, action) => {\n        eventAdapter.upsertOne(state.event, action.payload);\n      }\n    );\n\n    diaryBuilder = diaryBuilder.addCase(\n      eventThunk.remove.fulfilled,\n      (state, action) => {\n        eventAdapter.removeOne(state.event, action.payload);\n      }\n    );\n\n    diaryBuilder = registerCrudThunk(\n      diaryBuilder,\n      (state) => state.memory,\n      memoryAdapter,\n      memoryThunk\n    );\n\n    diaryBuilder = registerCrudThunk(\n      diaryBuilder,\n      (state) => state.experience,\n      experienceAdapter,\n      experienceThunk\n    );\n\n    diaryBuilder = registerCrudThunk(\n      diaryBuilder,\n      (state) => state.skill,\n      skillAdapter,\n      skillThunk\n    );\n\n    diaryBuilder = registerCrudThunk(\n      diaryBuilder,\n      (state) => state.resource,\n      resourceAdapter,\n      resourceThunk\n    );\n\n    diaryBuilder = registerCrudThunk(\n      diaryBuilder,\n      (state) => state.character,\n      characterAdapter,\n      characterThunk\n    );\n\n    diaryBuilder = registerCrudThunk(\n      diaryBuilder,\n      (state) => state.mark,\n      markAdapter,\n      markThunk\n    );\n\n    return diaryBuilder;\n  },\n});\n\nexport const {\n  eventStart,\n  eventEnd,\n  eventBack,\n  eventForward,\n  toggleShowAllMemories,\n  toggleShowAllSkills,\n  toggleShowAllResources,\n  toggleShowDiaryMemories,\n  toggleShowAllCharacters,\n} = diarySlice.actions;\n\nexport const selectVampire = (state: RootState) => state.diary.vampire;\n\nexport const selectIsDead = (state: RootState) =>\n  state.diary.vampire?.isDead ?? false;\n\nexport const selectIsExhausted = (state: RootState) => {\n  return (\n    selectSkills(state).length === 0 && selectResources(state).length === 0\n  );\n};\n\nexport const selectIsFirstEvent = (state: RootState) => {\n  return state.diary.currentEventIndex === 0;\n};\n\nexport const selectIsLastEvent = (state: RootState) => {\n  return (\n    state.diary.currentEventIndex !== undefined &&\n    state.diary.currentEventIndex === state.diary.event.ids.length - 1\n  );\n};\n\nexport const selectCurrentEventIndex = (state: RootState) =>\n  state.diary.currentEventIndex;\n\nexport const selectCurrentEvent = (state: RootState) => {\n  const index = state.diary.currentEventIndex;\n  if (index === undefined) {\n    return;\n  }\n\n  const id = state.diary.event.ids[index];\n  return state.diary.event.entities[id];\n};\n\nexport const selectPreviousEvent = (state: RootState) => {\n  const index = state.diary.currentEventIndex;\n  if (index === undefined || index === 0) {\n    return;\n  }\n\n  const previousIndex = index - 1;\n  const previousId = state.diary.event.ids[previousIndex];\n  return state.diary.event.entities[previousId];\n};\n\nexport const eventSelectors = eventAdapter.getSelectors(\n  (state: RootState) => state.diary.event\n);\n\nexport const memorySelectors = memoryAdapter.getSelectors(\n  (state: RootState) => state.diary.memory\n);\n\nexport const selectShowAllMemories = (state: RootState) =>\n  state.diary.showAllMemories;\nexport const selectShowAllSkills = (state: RootState) =>\n  state.diary.showAllSkills;\nexport const selectShowAllResources = (state: RootState) =>\n  state.diary.showAllResources;\nexport const selectShowDiaryMemories = (state: RootState) =>\n  state.diary.showDiaryMemories;\nexport const selectShowAllCharacters = (state: RootState) =>\n  state.diary.showAllCharacters;\n\nexport const selectMemories = (state: RootState) => {\n  const allMemories = memorySelectors.selectAll(state);\n\n  if (state.diary.showAllMemories) {\n    return allMemories.filter((memory) => memory.diary === null);\n  }\n\n  return allMemories.filter(\n    (memory) => !memory.isForgotten && memory.diary === null\n  );\n};\n\nexport const experienceSelectors = experienceAdapter.getSelectors(\n  (state: RootState) => state.diary.experience\n);\n\nexport const skillSelectors = skillAdapter.getSelectors(\n  (state: RootState) => state.diary.skill\n);\n\nexport const selectSkills = (state: RootState) => {\n  const allSkills = skillSelectors.selectAll(state);\n\n  if (state.diary.showAllSkills) {\n    return allSkills;\n  }\n\n  return allSkills.filter((skill) => !skill.isChecked);\n};\n\nexport const resourceSelectors = resourceAdapter.getSelectors(\n  (state: RootState) => state.diary.resource\n);\n\nexport const selectResources = (state: RootState) => {\n  const allResources = resourceSelectors.selectAll(state);\n\n  if (state.diary.showAllResources) {\n    return allResources;\n  }\n\n  return allResources.filter((resource) => !resource.isLost);\n};\n\nexport const selectCurrentDiary = (state: RootState) => {\n  return (\n    resourceSelectors\n      .selectAll(state)\n      .find((resource) => resource.isDiary && !resource.isLost) ?? null\n  );\n};\n\nexport const selectCurrentDiaryMemories = (state: RootState) => {\n  const diary = selectCurrentDiary(state);\n  if (diary === null) {\n    return [];\n  }\n\n  return memorySelectors\n    .selectAll(state)\n    .filter((memory) => memory.diary === diary.id);\n};\n\nexport const selectCurrentDiaryIsFull = (state: RootState) => {\n  return selectCurrentDiaryMemories(state).length >= DIARY_MEMORY_CAPACITY;\n};\n\nexport const characterSelectors = characterAdapter.getSelectors(\n  (state: RootState) => state.diary.character\n);\n\nexport const selectCharacters = (state: RootState) => {\n  const allCharacters = characterSelectors.selectAll(state);\n\n  if (state.diary.showAllCharacters) {\n    return allCharacters;\n  }\n\n  return allCharacters.filter((character) => !character.isDead);\n};\n\nexport const markSelectors = markAdapter.getSelectors(\n  (state: RootState) => state.diary.mark\n);\n","export const VAMPIRE_MEMORY_CAPACITY = 5;\n\nexport const DIARY_MEMORY_CAPACITY = 4;\n\nexport const MEMORY_EXPERIENCE_CAPACITY = 3;\n","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  ButtonGroup,\n  Button,\n  Card,\n  FormControl,\n  FormGroup,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { updateVampire } from \"vampire/vampire-slice\";\nimport { Event } from \"./diary-model\";\nimport {\n  eventBack,\n  eventEnd,\n  eventForward,\n  eventStart,\n  selectIsDead,\n  selectIsExhausted,\n  selectIsFirstEvent,\n  selectIsLastEvent,\n  selectPreviousEvent,\n} from \"./diary-slice\";\nimport { eventThunk } from \"./diary-thunk\";\n\nexport interface JournalCardProps {\n  vampireId: number;\n  currentEvent: Event;\n}\n\nexport function JournalCard({ vampireId, currentEvent }: JournalCardProps) {\n  const dispatch = useAppDispatch();\n  const isFirstEvent = useAppSelector(selectIsFirstEvent);\n  const isLastEvent = useAppSelector(selectIsLastEvent);\n  const isGameOver = useAppSelector(selectIsDead);\n  const isExhausted = useAppSelector(selectIsExhausted);\n  const previousEvent = useAppSelector(selectPreviousEvent);\n\n  const [description, setDescription] = useState(currentEvent.description);\n\n  useEffect(() => {\n    setDescription(currentEvent.description);\n  }, [currentEvent]);\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(eventThunk.update({ id: currentEvent.id, description: value }));\n  };\n\n  const handleFirst = () => dispatch(eventStart());\n\n  const handleLast = () => dispatch(eventEnd());\n\n  const handlePrev = () => dispatch(eventBack());\n\n  const handleNext = () => {\n    if (isLastEvent) {\n      dispatch(eventThunk.create({ vampire: vampireId }));\n    } else {\n      dispatch(eventForward());\n    }\n  };\n\n  const handleDead = () =>\n    dispatch(updateVampire({ id: vampireId, isDead: true }));\n\n  return (\n    <Card bg=\"dark\" text=\"light\">\n      <Card.Header>\n        Prompt {currentEvent.prompt}\n        {currentEvent.visit}\n      </Card.Header>\n      <Card.Body>\n        <ButtonGroup className=\"mb-3\">\n          <Button\n            variant=\"secondary\"\n            disabled={!previousEvent}\n            onClick={handlePrev}\n          >\n            <i className=\"bi bi-caret-left\"></i>\n            <span className=\"ms-2 d-none d-lg-inline\">Previous</span>\n          </Button>\n\n          <Button\n            variant={isLastEvent ? \"success\" : \"secondary\"}\n            disabled={isLastEvent && isGameOver}\n            onClick={handleNext}\n          >\n            <i className=\"bi bi-caret-right\"></i>\n            <span className=\"ms-2 d-none d-lg-inline\">Next</span>\n          </Button>\n        </ButtonGroup>\n\n        <ButtonGroup className=\"ms-3 mb-3\">\n          <Button\n            variant=\"secondary\"\n            disabled={isFirstEvent}\n            onClick={handleFirst}\n          >\n            <i className=\"bi bi-skip-start\"></i>\n            <span className=\"ms-2 d-none d-lg-inline\">First</span>\n          </Button>\n\n          <Button\n            variant=\"secondary\"\n            disabled={isLastEvent}\n            onClick={handleLast}\n          >\n            <i className=\"bi bi-skip-end\"></i>\n            <span className=\"ms-2 d-none d-lg-inline\">Last</span>\n          </Button>\n        </ButtonGroup>\n\n        {isExhausted && !isGameOver ? (\n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={OVERLAY_DELAY}\n            overlay={\n              <Tooltip>\n                <p>\n                  You die if a Prompt forces you to check a Skill or lose a\n                  Resource but you have none.\n                </p>\n                <p>\n                  Describe how your Vampire dies and then click this button to\n                  end the game.\n                </p>\n              </Tooltip>\n            }\n          >\n            <Button variant=\"danger\" className=\"ms-3 mb-3\" onClick={handleDead}>\n              <i className=\"bi bi-x-octagon\"></i>\n              <span className=\"ms-2 d-none d-lg-inline\">Dead</span>\n            </Button>\n          </OverlayTrigger>\n        ) : null}\n\n        <Card.Text>{currentEvent?.promptDescription}</Card.Text>\n\n        <FormGroup>\n          <FormControl\n            as={DebounceInput}\n            forceNotifyByEnter={false}\n            debounceTimeout={1000}\n            placeholder=\"Describe what happens...\"\n            value={description}\n            onChange={handleDescriptionChange}\n            element={TextareaAutosize as any}\n          />\n        </FormGroup>\n      </Card.Body>\n    </Card>\n  );\n}\n","import { useAppDispatch } from \"app/hooks\";\nimport { useState } from \"react\";\nimport { FormControl, FormGroup } from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { Mark } from \"./diary-model\";\nimport { markThunk } from \"./diary-thunk\";\n\nexport interface MarkFormProps {\n  mark: Mark;\n}\n\nexport function MarkCard({ mark }: MarkFormProps) {\n  const dispatch = useAppDispatch();\n  const [description, setDescription] = useState(mark.description);\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(markThunk.update({ id: mark.id, description: value }));\n  };\n\n  return (\n    <FormGroup className=\"mt-3\">\n      <FormControl\n        as={DebounceInput}\n        element={TextareaAutosize as any}\n        forceNotifyByEnter={false}\n        debounceTimeout={1000}\n        placeholder=\"Describe the mark...\"\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n    </FormGroup>\n  );\n}\n","import { Mark } from \"./diary-model\";\nimport { MarkCard } from \"./MarkCard\";\n\nexport interface MarkListProps {\n  marks: Mark[];\n}\n\nexport function MarkList({ marks }: MarkListProps) {\n  return (\n    <>\n      {marks.map((mark) => (\n        <MarkCard key={mark.id} mark={mark} />\n      ))}\n    </>\n  );\n}\n","import { useAppDispatch } from \"app/hooks\";\nimport React, { useState } from \"react\";\nimport { FormControl, FormGroup } from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { Experience } from \"./diary-model\";\nimport { experienceThunk } from \"./diary-thunk\";\n\nexport interface ExperienceFormProps {\n  experience: Experience;\n}\n\nexport function ExperienceForm({ experience }: ExperienceFormProps) {\n  const dispatch = useAppDispatch();\n  const [description, setDescription] = useState(experience.description);\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(experienceThunk.update({ id: experience.id, description: value }));\n  };\n\n  return (\n    <FormGroup className=\"mt-3\">\n      <FormControl\n        as={DebounceInput}\n        forceNotifyByEnter={false}\n        debounceTimeout={1000}\n        placeholder=\"Describe the experience...\"\n        value={description}\n        onChange={handleDescriptionChange}\n        element={TextareaAutosize as any}\n      />\n    </FormGroup>\n  );\n}\n","import { Experience } from \"./diary-model\";\nimport { ExperienceForm } from \"./ExperienceForm\";\n\nexport interface ExperienceListProps {\n  experiences: Experience[];\n}\n\nexport function ExperienceList({ experiences }: ExperienceListProps) {\n  return (\n    <>\n      {experiences.map((experience, index) => (\n        <ExperienceForm key={experience.id} experience={experience} />\n      ))}\n    </>\n  );\n}\n","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport {\n  Button,\n  Card,\n  OverlayTrigger,\n  ToggleButton,\n  Tooltip,\n} from \"react-bootstrap\";\n\nimport { experienceThunk, memoryThunk } from \"./diary-thunk\";\nimport { ExperienceList } from \"./ExperienceList\";\nimport { Experience, Memory } from \"./diary-model\";\nimport { selectCurrentDiary, selectCurrentDiaryIsFull } from \"./diary-slice\";\nimport { MEMORY_EXPERIENCE_CAPACITY } from \"./diary-constants\";\nimport { OVERLAY_DELAY } from \"common/constants\";\n\nexport interface MemoryCardProps {\n  memory: Memory;\n  experiences: Experience[];\n}\n\nexport function MemoryCard({ memory, experiences }: MemoryCardProps) {\n  const dispatch = useAppDispatch();\n  const diary = useAppSelector(selectCurrentDiary);\n  const isDiaryFull = useAppSelector(selectCurrentDiaryIsFull);\n\n  const hasMaxExperiences = experiences.length >= MEMORY_EXPERIENCE_CAPACITY;\n\n  const handleCreate = () =>\n    dispatch(experienceThunk.create({ memory: memory.id, description: \"\" }));\n\n  const handleForget = () =>\n    dispatch(\n      memoryThunk.update({ id: memory.id, isForgotten: !memory.isForgotten })\n    );\n\n  const handleDiary = () =>\n    dispatch(memoryThunk.update({ id: memory.id, diary: diary!.id }));\n\n  return (\n    <Card className=\"mt-3\">\n      <Card.Header>Experiences</Card.Header>\n      <Card.Body>\n        {memory.diary === null ? (\n          <>\n            <OverlayTrigger\n              placement=\"bottom\"\n              delay={OVERLAY_DELAY}\n              overlay={\n                <Tooltip>\n                  {memory.isForgotten\n                    ? \"Cannot add new Experiences to a forgotten Memory\"\n                    : hasMaxExperiences\n                    ? \"A Memory can only hold three Experiences\"\n                    : \"Add a new Experience\"}\n                </Tooltip>\n              }\n            >\n              <span className=\"d-inline-block\">\n                <Button\n                  disabled={hasMaxExperiences || memory.isForgotten}\n                  variant=\"outline-success\"\n                  onClick={handleCreate}\n                >\n                  <i className=\"bi bi-plus-lg\"></i>\n                  <span className=\"ms-2 d-none d-lg-inline\">Create</span>\n                </Button>\n              </span>\n            </OverlayTrigger>\n            <OverlayTrigger\n              placement=\"bottom\"\n              delay={OVERLAY_DELAY}\n              overlay={<Tooltip>Remove this Memory</Tooltip>}\n            >\n              <ToggleButton\n                type=\"checkbox\"\n                value=\"1\"\n                className=\"ms-3\"\n                variant=\"outline-danger\"\n                checked={memory.isForgotten}\n                onClick={handleForget}\n              >\n                <i className=\"bi bi-x-lg\"></i>\n                <span className=\"ms-2 d-none d-lg-inline\">Forget</span>\n              </ToggleButton>\n            </OverlayTrigger>\n            <OverlayTrigger\n              placement=\"bottom\"\n              delay={OVERLAY_DELAY}\n              overlay={\n                <Tooltip>\n                  {diary === null\n                    ? \"Your Vampire does not have a Diary\"\n                    : isDiaryFull\n                    ? \"A Diary can only hold four Memories\"\n                    : memory.isForgotten\n                    ? \"A forgotten Memory cannot be stored in a Diary\"\n                    : \"Move this Memory to your Diary\"}\n                </Tooltip>\n              }\n            >\n              <span className=\"d-inline-block\">\n                <Button\n                  disabled={diary === null || isDiaryFull || memory.isForgotten}\n                  variant=\"outline-secondary\"\n                  className=\"ms-3\"\n                  onClick={handleDiary}\n                >\n                  <i className=\"bi bi-book\"></i>\n                  <span className=\"ms-2 d-none d-lg-inline\">Record</span>\n                </Button>\n              </span>\n            </OverlayTrigger>\n          </>\n        ) : null}\n\n        {memory.isForgotten || memory.diary !== null ? (\n          <>\n            {experiences.map((experience) => (\n              <Card.Text key={experience.id} className=\"text-muted mt-3\">\n                {experience.description}\n              </Card.Text>\n            ))}\n          </>\n        ) : (\n          <ExperienceList experiences={experiences} />\n        )}\n      </Card.Body>\n    </Card>\n  );\n}\n","import { Experience, Memory } from \"./diary-model\";\nimport { MemoryCard } from \"./MemoryCard\";\n\nexport interface MemoryListProps {\n  memories: Memory[];\n  experiences: Experience[];\n}\n\nexport function MemoryList({ memories, experiences }: MemoryListProps) {\n  const experienceMap = experiences.reduce((map, experience) => {\n    const existing = map.get(experience.memory);\n    if (existing) {\n      existing.push(experience);\n    } else {\n      map.set(experience.memory, [experience]);\n    }\n    return map;\n  }, new Map<number, Experience[]>());\n\n  return (\n    <>\n      {memories.map((memory) => (\n        <MemoryCard\n          key={memory.id}\n          memory={memory}\n          experiences={experienceMap.get(memory.id) ?? []}\n        />\n      ))}\n    </>\n  );\n}\n","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Card,\n  FormControl,\n  FormGroup,\n  OverlayTrigger,\n  ToggleButton,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { Resource } from \"./diary-model\";\nimport {\n  experienceSelectors,\n  selectCurrentDiary,\n  selectCurrentDiaryMemories,\n  selectShowDiaryMemories,\n  toggleShowDiaryMemories,\n} from \"./diary-slice\";\nimport { resourceThunk } from \"./diary-thunk\";\nimport { MemoryList } from \"./MemoryList\";\n\nexport interface ResourceCardProps {\n  resource: Resource;\n}\n\nexport function ResourceCard({ resource }: ResourceCardProps) {\n  const dispatch = useAppDispatch();\n\n  const [description, setDescription] = useState(resource.description);\n  const [isDiary, setIsDiary] = useState(resource.isDiary);\n\n  const diary = useAppSelector(selectCurrentDiary);\n  const hasOtherDiary = diary !== null && !isDiary;\n\n  const showMemories = useAppSelector(selectShowDiaryMemories);\n  const memories = useAppSelector(selectCurrentDiaryMemories);\n  const experiences = useAppSelector(experienceSelectors.selectAll);\n\n  useEffect(() => {\n    setIsDiary(resource.isDiary);\n  }, [resource]);\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(resourceThunk.update({ id: resource.id, description: value }));\n  };\n\n  const handleLost = () =>\n    dispatch(\n      resourceThunk.update({ id: resource.id, isLost: !resource.isLost })\n    );\n\n  const toggleIsDiary = () => {\n    const value = !isDiary;\n    dispatch(resourceThunk.update({ id: resource.id, isDiary: value }));\n  };\n\n  const handleToggleShowMemories = () => {\n    dispatch(toggleShowDiaryMemories());\n  };\n\n  return (\n    <Card className=\"mt-3\">\n      <Card.Body>\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={OVERLAY_DELAY}\n          overlay={\n            <Tooltip>\n              {resource.isLost\n                ? \"A lost Resource cannot become a Diary\"\n                : hasOtherDiary\n                ? \"A Vampire can only hold one Diary\"\n                : \"A Diary can hold up to four Memories\"}\n            </Tooltip>\n          }\n        >\n          <span className=\"d-inline-block\">\n            <ToggleButton\n              type=\"checkbox\"\n              variant=\"outline-secondary\"\n              value=\"1\"\n              disabled={hasOtherDiary || resource.isLost}\n              checked={isDiary}\n              onClick={toggleIsDiary}\n            >\n              <i className=\"bi bi-book\"></i>\n              <span className=\"ms-2 d-none d-lg-inline\">Diary</span>\n            </ToggleButton>\n          </span>\n        </OverlayTrigger>\n\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={OVERLAY_DELAY}\n          overlay={<Tooltip>Remove this Resource</Tooltip>}\n        >\n          <ToggleButton\n            type=\"checkbox\"\n            value=\"1\"\n            variant=\"outline-danger\"\n            className=\"ms-3\"\n            checked={resource.isLost}\n            onClick={handleLost}\n          >\n            <i className=\"bi bi-x-lg\"></i>\n            <span className=\"ms-2 d-none d-lg-inline\">Lost</span>\n          </ToggleButton>\n        </OverlayTrigger>\n\n        {isDiary && !resource.isLost ? (\n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={OVERLAY_DELAY}\n            overlay={<Tooltip>Show Memories recorded in this Diary</Tooltip>}\n          >\n            <ToggleButton\n              type=\"checkbox\"\n              value=\"2\"\n              variant=\"outline-primary\"\n              className=\"ms-3\"\n              checked={showMemories}\n              onClick={handleToggleShowMemories}\n            >\n              <i className=\"bi bi-eye\"></i>\n              <span className=\"ms-2 d-none d-lg-inline\">Show Memories</span>\n            </ToggleButton>\n          </OverlayTrigger>\n        ) : null}\n\n        {resource.isLost ? (\n          <Card.Text className=\"text-muted mt-3\">\n            {resource.description}\n          </Card.Text>\n        ) : (\n          <FormGroup>\n            <FormControl\n              className=\"mt-3\"\n              as={DebounceInput}\n              element={TextareaAutosize as any}\n              forceNotifyByEnter={false}\n              debounceTimeout={1000}\n              placeholder=\"Describe the resource...\"\n              value={description}\n              onChange={handleDescriptionChange}\n            />\n          </FormGroup>\n        )}\n\n        {showMemories ? (\n          <MemoryList memories={memories} experiences={experiences} />\n        ) : null}\n      </Card.Body>\n    </Card>\n  );\n}\n","import { Resource } from \"./diary-model\";\nimport { ResourceCard } from \"./ResourceCard\";\n\nexport interface ResourceListProps {\n  resources: Resource[];\n}\n\nexport function ResourceList({ resources }: ResourceListProps) {\n  return (\n    <>\n      {resources.map((resource) => (\n        <ResourceCard key={resource.id} resource={resource} />\n      ))}\n    </>\n  );\n}\n","import { useAppDispatch } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport { useState } from \"react\";\nimport {\n  Col,\n  FormControl,\n  FormGroup,\n  OverlayTrigger,\n  Row,\n  ToggleButton,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { Skill } from \"./diary-model\";\nimport { skillThunk } from \"./diary-thunk\";\n\nexport interface SkillCardProps {\n  skill: Skill;\n}\n\nexport function SkillCard({ skill }: SkillCardProps) {\n  const dispatch = useAppDispatch();\n  const [description, setDescription] = useState(skill.description);\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(skillThunk.update({ id: skill.id, description: value }));\n  };\n\n  const handleCheck = () =>\n    dispatch(skillThunk.update({ id: skill.id, isChecked: !skill.isChecked }));\n\n  return (\n    <Row className=\"mt-3\">\n      <Col>\n        {skill.isChecked ? (\n          <span className=\"text-muted\">{skill.description}</span>\n        ) : (\n          <FormGroup>\n            <FormControl\n              as={DebounceInput}\n              element={TextareaAutosize as any}\n              forceNotifyByEnter={false}\n              debounceTimeout={1000}\n              placeholder=\"Describe the skill...\"\n              value={description}\n              onChange={handleDescriptionChange}\n            />\n          </FormGroup>\n        )}\n      </Col>\n      <Col xs=\"auto\">\n        <OverlayTrigger\n          placement=\"right\"\n          delay={OVERLAY_DELAY}\n          overlay={<Tooltip>Remove this Skill</Tooltip>}\n        >\n          <ToggleButton\n            type=\"checkbox\"\n            value=\"1\"\n            variant=\"outline-danger\"\n            checked={skill.isChecked}\n            onClick={handleCheck}\n          >\n            <i className=\"bi bi-check-lg\"></i>\n          </ToggleButton>\n        </OverlayTrigger>\n      </Col>\n    </Row>\n  );\n}\n","import { Skill } from \"./diary-model\";\nimport { SkillCard } from \"./SkillCard\";\n\nexport interface SkillListProps {\n  skills: Skill[];\n}\n\nexport function SkillList({ skills }: SkillListProps) {\n  return (\n    <>\n      {skills.map((skill) => (\n        <SkillCard key={skill.id} skill={skill} />\n      ))}\n    </>\n  );\n}\n","import { useAppDispatch } from \"app/hooks\";\nimport React, { useEffect, useState } from \"react\";\nimport { FormControl, FormGroup, FormLabel } from \"react-bootstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { updateVampire } from \"vampire/vampire-slice\";\nimport { Vampire } from \"../vampire/vampire-model\";\n\nexport interface VampireFormProps {\n  vampire: Vampire;\n}\n\nexport function VampireForm({ vampire }: VampireFormProps) {\n  const dispatch = useAppDispatch();\n\n  const [name, setName] = useState(vampire.name);\n  const [description, setDescription] = useState(vampire.description);\n\n  useEffect(() => {\n    setName(vampire.name);\n    setDescription(vampire.description);\n  }, [vampire]);\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setName(value);\n    dispatch(updateVampire({ id: vampire.id, name: value }));\n  };\n\n  const handleDescriptionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    setDescription(value);\n    dispatch(updateVampire({ id: vampire.id, description: value }));\n  };\n\n  return (\n    <>\n      <FormGroup>\n        <FormLabel>Name</FormLabel>\n        <FormControl\n          as={DebounceInput}\n          forceNotifyByEnter={false}\n          debounceTimeout={1000}\n          placeholder=\"Name your vampire...\"\n          value={name}\n          onChange={handleNameChange}\n        />\n      </FormGroup>\n\n      <FormGroup className=\"mt-3\">\n        <FormLabel>Description</FormLabel>\n        <FormControl\n          as={DebounceInput}\n          forceNotifyByEnter={false}\n          element={TextareaAutosize as any}\n          debounceTimeout={1000}\n          placeholder=\"Describe your vampire...\"\n          value={description}\n          onChange={handleDescriptionChange}\n        />\n      </FormGroup>\n    </>\n  );\n}\n","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport { useEffect } from \"react\";\nimport {\n  Button,\n  Accordion,\n  Row,\n  Col,\n  Spinner,\n  Container,\n  OverlayTrigger,\n  Tooltip,\n  ToggleButton,\n} from \"react-bootstrap\";\nimport AccordionBody from \"react-bootstrap/esm/AccordionBody\";\nimport AccordionHeader from \"react-bootstrap/esm/AccordionHeader\";\nimport AccordionItem from \"react-bootstrap/esm/AccordionItem\";\nimport { useParams } from \"react-router\";\nimport { CharacterList } from \"./CharacterList\";\nimport { CreationCard } from \"./CreationCard\";\nimport { VAMPIRE_MEMORY_CAPACITY } from \"./diary-constants\";\nimport {\n  experienceSelectors,\n  markSelectors,\n  selectCurrentEvent,\n  selectSkills,\n  selectVampire,\n  selectMemories,\n  selectResources,\n  selectCharacters,\n  selectShowAllMemories,\n  selectShowAllSkills,\n  selectShowAllResources,\n  selectShowAllCharacters,\n  toggleShowAllSkills,\n  toggleShowAllResources,\n  toggleShowAllCharacters,\n  toggleShowAllMemories,\n} from \"./diary-slice\";\nimport {\n  characterThunk,\n  markThunk,\n  memoryThunk,\n  resourceThunk,\n  retrieveDeepVampire,\n  skillThunk,\n} from \"./diary-thunk\";\nimport { JournalCard } from \"./JournalCard\";\nimport { MarkList } from \"./MarkList\";\nimport { MemoryList } from \"./MemoryList\";\nimport { ResourceList } from \"./ResourceList\";\nimport { SkillList } from \"./SkillList\";\nimport { VampireForm } from \"./VampireForm\";\n\nexport function DiaryPage() {\n  const { id } = useParams();\n  const vampireId = parseInt(id!);\n\n  const dispatch = useAppDispatch();\n\n  const vampire = useAppSelector(selectVampire);\n  const currentEvent = useAppSelector(selectCurrentEvent);\n\n  const memories = useAppSelector(selectMemories);\n  const hasMaxMemories = memories.length >= VAMPIRE_MEMORY_CAPACITY;\n\n  const experiences = useAppSelector(experienceSelectors.selectAll);\n  const skills = useAppSelector(selectSkills);\n  const characters = useAppSelector(selectCharacters);\n  const resources = useAppSelector(selectResources);\n  const marks = useAppSelector(markSelectors.selectAll);\n\n  const showAllMemories = useAppSelector(selectShowAllMemories);\n  const showAllSkills = useAppSelector(selectShowAllSkills);\n  const showAllResources = useAppSelector(selectShowAllResources);\n  const showAllCharacters = useAppSelector(selectShowAllCharacters);\n\n  useEffect(() => {\n    dispatch(retrieveDeepVampire(vampireId));\n  }, [vampireId, dispatch]);\n\n  const handleCreateMemory = () =>\n    dispatch(memoryThunk.create({ vampire: vampireId }));\n\n  const handleCreateSkill = () =>\n    dispatch(skillThunk.create({ vampire: vampireId, description: \"\" }));\n\n  const handleCreateResource = () =>\n    dispatch(\n      resourceThunk.create({\n        vampire: vampireId,\n        description: \"\",\n        isDiary: false,\n      })\n    );\n\n  const handleCreateCharacter = () =>\n    dispatch(\n      characterThunk.create({\n        vampire: vampireId,\n        name: \"\",\n        description: \"\",\n        isImmortal: false,\n      })\n    );\n\n  const handleCreateMark = () =>\n    dispatch(markThunk.create({ vampire: vampireId, description: \"\" }));\n\n  const handleShowAllMemories = () => dispatch(toggleShowAllMemories());\n  const handleShowAllSkills = () => dispatch(toggleShowAllSkills());\n  const handleShowAllResources = () => dispatch(toggleShowAllResources());\n  const handleShowAllCharacters = () => dispatch(toggleShowAllCharacters());\n\n  if (!vampire) {\n    return <Spinner animation=\"border\" />;\n  }\n\n  return (\n    <Container className=\"my-3\" fluid>\n      <Row>\n        <Col md className=\"mb-3\">\n          <Accordion defaultActiveKey=\"vampire\">\n            <AccordionItem eventKey=\"vampire\">\n              <AccordionHeader>Vampire</AccordionHeader>\n              <AccordionBody>\n                <VampireForm vampire={vampire} />\n              </AccordionBody>\n            </AccordionItem>\n            <AccordionItem eventKey=\"memories\">\n              <AccordionHeader>Memories</AccordionHeader>\n              <AccordionBody>\n                <OverlayTrigger\n                  placement=\"right\"\n                  delay={OVERLAY_DELAY}\n                  overlay={\n                    <Tooltip>\n                      {hasMaxMemories\n                        ? \"A Vampire can only remember five Memories\"\n                        : \"Add a new Memory\"}\n                    </Tooltip>\n                  }\n                >\n                  <span className=\"d-inline-block\">\n                    <Button\n                      disabled={hasMaxMemories}\n                      variant=\"outline-success\"\n                      onClick={handleCreateMemory}\n                    >\n                      <i className=\"bi bi-plus-lg\"></i>\n                      <span className=\"ms-2 d-none d-lg-inline\">Create</span>\n                    </Button>\n                  </span>\n                </OverlayTrigger>\n                <ToggleButton\n                  type=\"checkbox\"\n                  value=\"1\"\n                  variant=\"outline-primary\"\n                  className=\"ms-3\"\n                  checked={showAllMemories}\n                  onClick={handleShowAllMemories}\n                >\n                  <i className=\"bi bi-eye\"></i>\n                  <span className=\"ms-2 d-none d-lg-inline\">\n                    Show Forgotten\n                  </span>\n                </ToggleButton>\n                <MemoryList memories={memories} experiences={experiences} />\n              </AccordionBody>\n            </AccordionItem>\n            <AccordionItem eventKey=\"skills\">\n              <AccordionHeader>Skills</AccordionHeader>\n              <AccordionBody>\n                <OverlayTrigger\n                  placement=\"right\"\n                  delay={OVERLAY_DELAY}\n                  overlay={<Tooltip>Add a new Skill</Tooltip>}\n                >\n                  <Button variant=\"outline-success\" onClick={handleCreateSkill}>\n                    <i className=\"bi bi-plus-lg\"></i>\n                    <span className=\"ms-2 d-none d-lg-inline\">Create</span>\n                  </Button>\n                </OverlayTrigger>\n                <ToggleButton\n                  type=\"checkbox\"\n                  value=\"2\"\n                  variant=\"outline-primary\"\n                  className=\"ms-3\"\n                  checked={showAllSkills}\n                  onClick={handleShowAllSkills}\n                >\n                  <i className=\"bi bi-eye\"></i>\n                  <span className=\"ms-2 d-none d-lg-inline\">Show Checked</span>\n                </ToggleButton>\n                <SkillList skills={skills} />\n              </AccordionBody>\n            </AccordionItem>\n            <AccordionItem eventKey=\"resources\">\n              <AccordionHeader>Resources</AccordionHeader>\n              <AccordionBody>\n                <OverlayTrigger\n                  placement=\"right\"\n                  delay={OVERLAY_DELAY}\n                  overlay={<Tooltip>Add a new Resource</Tooltip>}\n                >\n                  <Button\n                    variant=\"outline-success\"\n                    onClick={handleCreateResource}\n                  >\n                    <i className=\"bi bi-plus-lg\"></i>\n                    <span className=\"ms-2 d-none d-lg-inline\">Create</span>\n                  </Button>\n                </OverlayTrigger>\n                <ToggleButton\n                  type=\"checkbox\"\n                  value=\"3\"\n                  variant=\"outline-primary\"\n                  className=\"ms-3\"\n                  checked={showAllResources}\n                  onClick={handleShowAllResources}\n                >\n                  <i className=\"bi bi-eye\"></i>\n                  <span className=\"ms-2 d-none d-lg-inline\">Show Lost</span>\n                </ToggleButton>\n                <ResourceList resources={resources} />\n              </AccordionBody>\n            </AccordionItem>\n            <AccordionItem eventKey=\"characters\">\n              <AccordionHeader>Characters</AccordionHeader>\n              <AccordionBody>\n                <OverlayTrigger\n                  placement=\"right\"\n                  delay={OVERLAY_DELAY}\n                  overlay={<Tooltip>Add a new Character</Tooltip>}\n                >\n                  <Button\n                    variant=\"outline-success\"\n                    onClick={handleCreateCharacter}\n                  >\n                    <i className=\"bi bi-plus-lg\"></i>\n                    <span className=\"ms-2 d-none d-lg-inline\">Create</span>\n                  </Button>\n                </OverlayTrigger>\n                <ToggleButton\n                  type=\"checkbox\"\n                  value=\"4\"\n                  variant=\"outline-primary\"\n                  className=\"ms-3\"\n                  checked={showAllCharacters}\n                  onClick={handleShowAllCharacters}\n                >\n                  <i className=\"bi bi-eye\"></i>\n                  <span className=\"ms-2 d-none d-lg-inline\">Show Dead</span>\n                </ToggleButton>\n                <CharacterList characters={characters} />\n              </AccordionBody>\n            </AccordionItem>\n            <AccordionItem eventKey=\"marks\">\n              <AccordionHeader>Marks</AccordionHeader>\n              <AccordionBody>\n                <OverlayTrigger\n                  placement=\"right\"\n                  delay={OVERLAY_DELAY}\n                  overlay={<Tooltip>Add a new Mark</Tooltip>}\n                >\n                  <Button variant=\"outline-success\" onClick={handleCreateMark}>\n                    <i className=\"bi bi-plus-lg\"></i>\n                    <span className=\"ms-2 d-none d-lg-inline\">Create</span>\n                  </Button>\n                </OverlayTrigger>\n                <MarkList marks={marks} />\n              </AccordionBody>\n            </AccordionItem>\n          </Accordion>\n        </Col>\n        <Col md>\n          {currentEvent ? (\n            <JournalCard vampireId={vampireId} currentEvent={currentEvent} />\n          ) : (\n            <CreationCard vampireId={vampireId} />\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import { FetchApi } from \"common/fetch\";\nimport { QueryParams, QueryResponse } from \"common/query\";\nimport { prepareUrl } from \"common/query\";\nimport { PromptGroup } from \"./prompt-group-model\";\n\nexport const PROMPT_GROUPS_URL = \"/api/v1/game/prompt-groups/\";\n\nexport async function queryPromptGroupsApi(\n  fetchApi: FetchApi,\n  queryParams?: QueryParams\n): Promise<QueryResponse<PromptGroup>> {\n  const url = prepareUrl(PROMPT_GROUPS_URL, queryParams);\n  const res = await fetchApi(url);\n  return res.json();\n}\n","import {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from \"@reduxjs/toolkit\";\nimport { authFetchApi } from \"auth/slice\";\nimport { RootState } from \"app/store\";\nimport { queryPromptGroupsApi } from \"./prompt-group-api\";\nimport { PromptGroup } from \"./prompt-group-model\";\nimport { QueryParams } from \"common/query\";\n\nexport const promptGroupAdapter = createEntityAdapter<PromptGroup>({\n  selectId: (promptGroup) => promptGroup.id,\n  sortComparer: (a, b) => a.id - b.id,\n});\n\nexport const queryPromptGroups = createAsyncThunk(\n  \"promptGroup/queryPromptGroups\",\n  (params: QueryParams | undefined, thunkApi) => {\n    const fetchApi = authFetchApi(thunkApi);\n    return queryPromptGroupsApi(fetchApi, params);\n  }\n);\n\nexport const promptGroupSlice = createSlice({\n  name: \"promptGroup\",\n  initialState: promptGroupAdapter.getInitialState(),\n  reducers: {},\n  extraReducers: (builder) =>\n    builder.addCase(queryPromptGroups.fulfilled, (state, action) => {\n      promptGroupAdapter.setAll(state, action.payload.results);\n    }),\n});\n\nexport const promptGroupSelectors = promptGroupAdapter.getSelectors<RootState>(\n  (state) => state.promptGroup\n);\n","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { promptGroupSelectors, queryPromptGroups } from \"./prompt-group-slice\";\nimport { useEffect, useState } from \"react\";\nimport {\n  FormControl,\n  FormGroup,\n  FormLabel,\n  Button,\n  Container,\n  FormSelect,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { CreateVampireFormData } from \"./vampire-model\";\nimport { OVERLAY_DELAY } from \"common/constants\";\n\nexport interface CreateVampireFormProps {\n  onCancel?: () => void;\n  onSubmit?: (formData: CreateVampireFormData) => void;\n}\n\nexport function CreateVampireForm({\n  onCancel,\n  onSubmit,\n}: CreateVampireFormProps) {\n  const dispatch = useAppDispatch();\n  const allPromptGroups = useAppSelector(promptGroupSelectors.selectAll);\n\n  const [name, setName] = useState<string | null>(null);\n  const [promptGroup, setPromptGroup] = useState<number | null>(null);\n\n  const isFormComplete = () => name && promptGroup !== null;\n\n  useEffect(() => {\n    dispatch(queryPromptGroups());\n  }, [dispatch]);\n\n  return (\n    <Container className=\"py-3\">\n      <h2>Create Vampire</h2>\n\n      <FormGroup>\n        <FormLabel>Name</FormLabel>\n        <FormControl\n          placeholder=\"Enter a name...\"\n          onChange={(event) => setName(event.target.value)}\n        />\n      </FormGroup>\n\n      <FormGroup className=\"mt-3\">\n        <FormLabel>Prompt Group</FormLabel>\n        <FormSelect\n          onChange={(event) => {\n            let promptGroup = null;\n            if (event.target.value !== \"\") {\n              promptGroup = parseInt(event.target.value);\n            }\n            setPromptGroup(promptGroup);\n          }}\n        >\n          <option value=\"\">Select a prompt group...</option>\n          {allPromptGroups.map((promptGroup) => (\n            <option key={promptGroup.id} value={promptGroup.id}>\n              {promptGroup.name}\n            </option>\n          ))}\n        </FormSelect>\n      </FormGroup>\n\n      <OverlayTrigger\n        placement=\"bottom\"\n        delay={OVERLAY_DELAY}\n        overlay={<Tooltip>Discard changes</Tooltip>}\n      >\n        <Button variant=\"outline-danger\" className=\"mt-3\" onClick={onCancel}>\n          <i className=\"bi bi-x-lg me-2\"></i>\n          Cancel\n        </Button>\n      </OverlayTrigger>\n\n      <OverlayTrigger\n        placement=\"bottom\"\n        delay={OVERLAY_DELAY}\n        overlay={<Tooltip>Go to the Diary page</Tooltip>}\n      >\n        <Button\n          variant=\"outline-success\"\n          className=\"mt-3 ms-3\"\n          disabled={!isFormComplete()}\n          onClick={() => {\n            onSubmit &&\n              onSubmit({\n                name: name as string,\n                description: \"\",\n                promptGroup: promptGroup as number,\n              });\n          }}\n        >\n          <i className=\"bi bi-plus-lg me-2\"></i>\n          Create\n        </Button>\n      </OverlayTrigger>\n    </Container>\n  );\n}\n","import \"./VampireList.css\";\n\nimport { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { useEffect } from \"react\";\nimport {\n  queryVampires,\n  removeVampire,\n  vampireSelectors,\n} from \"./vampire-slice\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router\";\n\nexport function VampireList() {\n  const dispatch = useAppDispatch();\n  const allVampires = useAppSelector(vampireSelectors.selectAll);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    dispatch(\n      queryVampires({\n        sort: [\"created_at\", \"-\"],\n      })\n    );\n  }, [dispatch]);\n\n  const handleDelete = (\n    event: React.MouseEvent<HTMLButtonElement>,\n    id: number\n  ) => {\n    event.stopPropagation();\n    dispatch(removeVampire(id));\n  };\n\n  return (\n    <Table hover>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Game Over</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {allVampires.map((vampire) => (\n          <tr\n            className=\"vampire-list-item\"\n            key={vampire.id}\n            onClick={() => navigate(`/vampires/${vampire.id}`)}\n          >\n            <td>{vampire.name}</td>\n            <td>{vampire.description}</td>\n            <td>{vampire.isDead ? \"Yes\" : \"No\"}</td>\n            <td>\n              <Button\n                variant=\"outline-danger\"\n                onClick={(event) => handleDelete(event, vampire.id)}\n              >\n                <i className=\"bi bi-x-lg\"></i>\n                <span className=\"ms-2 d-none d-lg-inline\">Delete</span>\n              </Button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n","import { useAppDispatch } from \"app/hooks\";\nimport { OVERLAY_DELAY } from \"common/constants\";\nimport { useState } from \"react\";\nimport {\n  Container,\n  Button,\n  Modal,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { useNavigate } from \"react-router\";\nimport { CreateVampireForm } from \"./CreateVampireForm\";\nimport { CreateVampireFormData } from \"./vampire-model\";\nimport { createVampire } from \"./vampire-slice\";\nimport { VampireList } from \"./VampireList\";\n\nexport function VampirePage() {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const [show, setShow] = useState(false);\n\n  const showModal = () => setShow(true);\n  const hideModal = () => setShow(false);\n\n  const handleCreate = async (formData: CreateVampireFormData) => {\n    const vampire = await dispatch(createVampire(formData)).unwrap();\n    hideModal();\n    navigate(`/vampires/${vampire.id}`);\n  };\n\n  return (\n    <Container className=\"mt-3\" fluid>\n      <OverlayTrigger\n        placement=\"bottom\"\n        delay={OVERLAY_DELAY}\n        overlay={<Tooltip>Create a new Vampire</Tooltip>}\n      >\n        <Button variant=\"outline-success\" className=\"mb-3\" onClick={showModal}>\n          <i className=\"bi bi-plus-lg me-2\"></i>\n          Create\n        </Button>\n      </OverlayTrigger>\n\n      <VampireList />\n\n      <Modal show={show} onHide={hideModal}>\n        <CreateVampireForm onCancel={hideModal} onSubmit={handleCreate} />\n      </Modal>\n    </Container>\n  );\n}\n","import { logout, selectIsLoggedIn } from \"auth/slice\";\nimport { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nexport function NavHeader() {\n  const isLoggedIn = useAppSelector(selectIsLoggedIn);\n  const dispatch = useAppDispatch();\n\n  const onLogout = () => dispatch(logout());\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\n      <Container fluid>\n        <Navbar.Brand href=\"/\">Vampire Diary</Navbar.Brand>\n        <Navbar.Toggle />\n        <Navbar.Collapse>\n          <Nav>\n            {isLoggedIn ? (\n              <Nav.Link as={Link} to=\"/vampires\">\n                Vampires\n              </Nav.Link>\n            ) : null}\n          </Nav>\n          <Nav className=\"ms-auto\">\n            {isLoggedIn ? (\n              <>\n                <Nav.Link as={Link} to=\"/settings\">\n                  Account\n                </Nav.Link>\n                <Nav.Link href=\"#\" onClick={onLogout}>\n                  Logout\n                </Nav.Link>\n              </>\n            ) : (\n              <>\n                <Nav.Link as={Link} to=\"/register\">\n                  Register\n                </Nav.Link>\n                <Nav.Link as={Link} to=\"/login\">\n                  Login\n                </Nav.Link>{\" \"}\n              </>\n            )}\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n","import { Login } from \"auth/Login\";\nimport { PrivateRoute } from \"auth/PrivateRoute\";\nimport { selectIsLoggedIn } from \"auth/slice\";\nimport { DiaryPage } from \"diary/DiaryPage\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport { VampirePage } from \"vampire/VampirePage\";\nimport { useAppSelector } from \"./hooks\";\nimport { NavHeader } from \"./NavHeader\";\n\nexport function App() {\n  const isLoggedIn = useAppSelector(selectIsLoggedIn);\n\n  return (\n    <>\n      <BrowserRouter>\n        <NavHeader />\n        <Routes>\n          <Route\n            path=\"/vampires/:id\"\n            element={\n              <PrivateRoute>\n                <DiaryPage />\n              </PrivateRoute>\n            }\n          />\n          <Route\n            path=\"/vampires\"\n            element={\n              <PrivateRoute>\n                <VampirePage />\n              </PrivateRoute>\n            }\n          />\n          <Route path=\"/settings\" />\n          <Route path=\"/login\" element={<Login />} />\n          <Route\n            path=\"*\"\n            element={<Navigate to={isLoggedIn ? \"/vampires\" : \"/login\"} />}\n          />\n        </Routes>\n      </BrowserRouter>\n    </>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { authSlice } from \"auth/slice\";\nimport { diarySlice } from \"diary/diary-slice\";\nimport { promptGroupSlice } from \"vampire/prompt-group-slice\";\nimport { vampireSlice } from \"vampire/vampire-slice\";\n\nexport const store = configureStore({\n  reducer: {\n    auth: authSlice.reducer,\n    promptGroup: promptGroupSlice.reducer,\n    vampire: vampireSlice.reducer,\n    diary: diarySlice.reducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { App } from \"./app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store } from \"./app/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}